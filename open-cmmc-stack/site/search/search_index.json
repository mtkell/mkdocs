{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udee1\ufe0f OpenCMMC Stack","text":"<p>A Free and Open-Source Infrastructure Guide for CMMC Level 2 Compliance</p> <p>This project provides a complete, secure, and modular self-hosted architecture to help small and medium-sized DoD contractors meet the requirements of CMMC Level 2 using open-source tools.</p>"},{"location":"#guide-overview","title":"\ud83d\udcda Guide Overview","text":"Section Title 00 Preface 01 Introduction to CMMC v2 02 Reference Architecture 03 Provisioning Infrastructure 04 Securing the Host OS 05 Identity &amp; Access Management 06 Secure File Sharing (Nextcloud) 07 Secure Email (Mailcow) 08 Monitoring &amp; Logging 09 Application Hosting (Podman) 10 Backup &amp; Recovery 11 Policies &amp; Procedures 12 Assessment &amp; Readiness 13 Architecture Summary &amp; Trust Boundaries 14 Deployment Guide Phase 0: Planning Phase 1: Terraform Provisioning Phase 2: Ansible Hardening Phase 3: Podman Services Phase 3A: Nextcloud All-In-One Phase 4: Identity &amp; Certificate Management Phase 5: Client Registration Phase 6: Logging &amp; Monitoring Phase 7: Validation &amp; Reporting 15 Security Operations Procedures (SecOps) 16 User Device Onboarding 17 Patch &amp; Vulnerability Management 18 Incident Response 19 Data Flow &amp; Trust Boundaries 20 Performance, Scaling &amp; Cost Estimation \u2014 Appendix A: Acronyms \u2014 Appendix B: Resources"},{"location":"#technologies-used","title":"\ud83d\udd27 Technologies Used","text":"<ul> <li>Podman \u2013 Secure, rootless container runtime</li> <li>Keycloak \u2013 Identity provider with SSO and MFA</li> <li>Tailscale \u2013 Zero Trust VPN mesh</li> <li>Nextcloud-All-In-One \u2013 Secure document collaboration</li> <li>Mailcow \u2013 Self-hosted email</li> <li>Wazuh \u2013 SIEM and endpoint monitoring</li> <li>Ansible &amp; Terraform \u2013 Infrastructure as Code</li> <li>Restic &amp; BorgBackup \u2013 Secure backup solutions</li> <li>MkDocs + Mermaid \u2013 Documentation &amp; diagrams</li> </ul>"},{"location":"#cmmc-domains-covered","title":"\ud83e\udde9 CMMC Domains Covered","text":"<p>This guide maps directly to all 14 CMMC Level 2 domains and their associated 110 practices as defined in NIST SP 800-171 Rev. 2.</p>"},{"location":"#license","title":"\ud83d\udcdc License","text":"<p>This project is released under the MIT License and is free to use, modify, and adapt.</p>"},{"location":"#credits","title":"\ud83e\udde0 Credits","text":"<p>Developed by cybersecurity professionals and community contributors focused on secure-by-design principles for the Defense Industrial Base.</p> <p>For questions or contributions, please open an issue or submit a pull request.</p>"},{"location":"99_appendix_a_acronyms/","title":"\ud83d\udcd8 Appendix A: Acronyms and Abbreviations","text":"<p>| AC | Access Control | | ACL | Access Control List | | AIDE | Advanced Intrusion Detection Environment | | API | Application Programming Interface | | AU | Audit and Accountability | | CA | Security Assessment | | CI/CD | Continuous Integration / Continuous Deployment | | CLI | Command Line Interface | | CM | Configuration Management | | CP | Contingency Planning | | CUI | Controlled Unclassified Information | | DNS | Domain Name System | | FCI | Federal Contract Information | | IA | Identification and Authentication | | IAM | Identity and Access Management | | IR | Incident Response | | JSON | JavaScript Object Notation | | LTS | Long-Term Support | | MA | Maintenance | | MDM | Mobile Device Management | | MFA | Multi-Factor Authentication | | MP | Media Protection | | OIDC | OpenID Connect | | PDF | Portable Document Format | | PE | Physical Protection | | PL | Planning | | PM | Program Management | | PS | Personnel Security | | RA | Risk Assessment | | RBAC | Role-Based Access Control | | SA | System and Services Acquisition | | SAML | Security Assertion Markup Language | | SBOM | Software Bill of Materials | | SC | System and Communications Protection | | SI | System and Information Integrity | | SIEM | Security Information and Event Management | | SOC | Security Operations Center | | SSO | Single Sign-On | | SSP | System Security Plan | | TLS | Transport Layer Security | | UI | User Interface | | VM | Virtual Machine | | VPC | Virtual Private Cloud | | YAML | Yet Another Markup Language |</p>"},{"location":"99_appendix_b_resources/","title":"\ud83d\udcda Appendix B: Reference Resources","text":""},{"location":"99_appendix_b_resources/#cmmc-and-nist","title":"\ud83d\udcdd CMMC and NIST","text":"<ul> <li>CMMC Model v2.0 Documentation</li> <li>NIST SP 800-171 Rev. 2</li> <li>NIST SP 800-172 (Advanced Controls)</li> <li>NIST SP 800-53 Rev. 5</li> <li>Cybersecurity Framework (CSF) 2.0</li> </ul>"},{"location":"99_appendix_b_resources/#tools-used-in-this-guide","title":"\ud83d\udee0\ufe0f Tools Used in This Guide","text":"<ul> <li>Podman</li> <li>Keycloak</li> <li>Nextcloud</li> <li>Mailcow</li> <li>Tailscale</li> <li>Wazuh</li> <li>Auditd</li> <li>Restic</li> <li>BorgBackup</li> <li>Rclone</li> <li>Terraform</li> <li>Ansible</li> <li>Mermaid CLI</li> <li>MkDocs</li> <li>mkdocs-material Theme</li> </ul>"},{"location":"99_appendix_b_resources/#policy-template-resources","title":"\ud83d\udcd1 Policy &amp; Template Resources","text":"<ul> <li>ProjectSpectrum Document Library</li> <li>Open Source Policy Templates (GitHub)</li> <li>CMMC-AB Resources</li> <li>FedRAMP Templates</li> <li>OpenControl Compliance Templates</li> </ul>"},{"location":"00_preface/","title":"\ud83e\udded Section 0: Project Overview &amp; Usage","text":""},{"location":"00_preface/#purpose","title":"\ud83c\udfaf Purpose","text":"<p>This guide provides a full-stack, open-source infrastructure and documentation model to help small and medium-sized DoD contractors meet CMMC Level 2 requirements. Every section includes actionable implementation steps and clearly maps to the NIST SP 800-171 control families.</p>"},{"location":"00_preface/#who-is-this-for","title":"\ud83d\udca1 Who Is This For?","text":"<p>This guide is designed for:</p> <ul> <li>IT Directors, CTOs, and CISOs in the Defense Industrial Base</li> <li>Small teams managing internal or customer-facing secure infrastructure</li> <li>MSPs and consultants preparing clients for CMMC 2.0 assessments</li> <li>Technical leads seeking a compliant, open-source alternative to GCC High</li> </ul>"},{"location":"00_preface/#whats-included","title":"\ud83d\udee0\ufe0f What\u2019s Included?","text":"<p>This documentation delivers:</p> <ul> <li>A hardened Ubuntu-based infrastructure using rootless Podman, systemd, and Zero Trust principles</li> <li>Fully containerized services for file sharing, email, SSO, monitoring, and backup</li> <li>Automated provisioning using Terraform, Ansible, and templated CI/CD workflows</li> <li>Pre-mapped policy templates, SSP structure, and audit-ready documentation</li> <li>Compatibility with Windows, Linux, macOS, iOS, and Android clients</li> </ul>"},{"location":"00_preface/#whats-required","title":"\ud83e\uddf0 What\u2019s Required?","text":"Area Requirements OS Ubuntu 22.04 LTS (hardened) Host Type Cloud VM, VPS, bare metal Tools Installed Podman, Ansible, Terraform Compliance Target CMMC Level 2, mapped to NIST SP 800-171 Rev. 2"},{"location":"00_preface/#guide-format","title":"\ud83d\udce6 Guide Format","text":"<p>This guide is structured across 21 technical and strategic sections with appendices and automation support, each representing a key stage of deployment, governance, or assessment readiness.</p> <p>Each section includes:</p> <ul> <li>Infrastructure-as-code implementation</li> <li>CMMC control mappings</li> <li>Operational guidance</li> <li>Audit artifacts and documentation templates</li> </ul>"},{"location":"00_preface/#licensing-and-use","title":"\ud83d\udcdc Licensing and Use","text":"<p>This project is provided under the MIT License. You are free to copy, adapt, modify, or integrate it into your own workflows. Attribution is appreciated but not required.</p> <p>\u26a0\ufe0f Disclaimer: This guide is not a certification guarantee. It is a blueprint for implementation. You must tailor it to your unique environment and work with a qualified C3PAO for CMMC certification.</p>"},{"location":"00_preface/#getting-started","title":"\u2705 Getting Started","text":"<p>You can begin immediately with Section 1: Introduction to CMMC v2, or browse the full guide index for an overview of all components.</p>"},{"location":"01_cmmc_intro/","title":"\ud83d\udcd1 Section 1: Introduction to CMMC v2","text":""},{"location":"01_cmmc_intro/#what-is-cmmc-v2","title":"\ud83d\udd10 What is CMMC v2?","text":"<p>The Cybersecurity Maturity Model Certification (CMMC) is a unified cybersecurity framework created by the U.S. Department of Defense (DoD) to safeguard the Defense Industrial Base (DIB) from cyber threats. CMMC Version 2.0 refines the original model to be more streamlined, flexible, and aligned with existing federal standards.</p> <p>CMMC v2 introduces three levels of cybersecurity maturity:</p> <ul> <li>Level 1 (Foundational) \u2013 17 basic safeguarding requirements (aligned with FAR 52.204-21)</li> <li>Level 2 (Advanced) \u2013 110 security requirements (mirrors NIST SP 800-171)</li> <li>Level 3 (Expert) \u2013 Based on NIST SP 800-172, designed for highly sensitive environments</li> </ul> <p>CMMC is not just a self-check \u2014 it's a requirement embedded into DoD contracts. Companies handling Controlled Unclassified Information (CUI) are expected to reach Level 2 or higher, depending on the nature of the contract.</p>"},{"location":"01_cmmc_intro/#how-it-maps-to-nist-sp-800-171","title":"\ud83d\udcda How It Maps to NIST SP 800-171","text":"<p>CMMC v2 Level 2 is intentionally and directly mapped to NIST Special Publication 800-171, which defines the security requirements for protecting CUI in non-federal systems.</p> NIST SP 800-171 CMMC v2 Level 2 110 Requirements 110 Practices 14 Control Families 14 Domains Assessment-based Assessment-based <p>Each of the 14 NIST control families (Access Control, Audit and Accountability, Configuration Management, etc.) is reflected in the CMMC v2 domain structure.</p> <p>CMMC goes a step further by requiring evidence, documentation, and often third-party assessments through Certified Third-Party Assessment Organizations (C3PAOs) for Level 2.</p>"},{"location":"01_cmmc_intro/#cmmc-level-2-overview","title":"\ud83c\udfaf CMMC Level 2 Overview","text":"<p>Level 2 applies to contractors who store, process, or transmit CUI. This includes sensitive technical data, engineering drawings, procurement details, and program information \u2014 but not classified materials.</p>"},{"location":"01_cmmc_intro/#level-2-key-elements","title":"Level 2 Key Elements","text":"<ul> <li>All 110 controls from NIST 800-171</li> <li>Formal System Security Plan (SSP) and Plan of Action &amp; Milestones (POA&amp;M)</li> <li>Scope definition of the systems and assets that handle CUI</li> <li>Third-party certification required for prioritized acquisitions</li> </ul> <p>Level 2 is the most common target level for small and medium DoD contractors.</p>"},{"location":"01_cmmc_intro/#why-foss-pros-and-risks","title":"\ud83e\udde9 Why FOSS? Pros and Risks","text":"<p>This guide proposes an implementation using Free and Open Source Software (FOSS) tools, carefully selected to align with CMMC objectives while reducing cost and increasing transparency.</p>"},{"location":"01_cmmc_intro/#benefits-of-foss","title":"\u2705 Benefits of FOSS","text":"<ul> <li>Cost efficiency: No per-user licensing costs</li> <li>Transparency: Open codebases support trust and auditability</li> <li>Portability: No vendor lock-in, can run on any compliant infrastructure</li> <li>Community-driven: Security issues are often identified and patched faster</li> </ul>"},{"location":"01_cmmc_intro/#risks-to-mitigate","title":"\u26a0\ufe0f Risks to Mitigate","text":"<ul> <li>Configuration complexity: More technical knowledge is required</li> <li>Support: No guaranteed commercial support unless purchased separately</li> <li>Compliance responsibility: You own the full implementation and documentation</li> <li>Security validation: You must harden, monitor, and validate each component</li> </ul> <p>FOSS is ideal for organizations with technical maturity or access to a capable MSP (Managed Service Provider) who can support security and compliance goals.</p>"},{"location":"01_cmmc_intro/#what-this-guide-does-and-doesnt-do","title":"\ud83d\udccc What This Guide Does (and Doesn\u2019t) Do","text":""},{"location":"01_cmmc_intro/#this-guide-does","title":"\u2705 This guide does","text":"<ul> <li>Provide a full-stack architecture using FOSS tools aligned to CMMC v2 Level 2</li> <li>Include infrastructure-as-code examples (Terraform, Ansible)</li> <li>Map controls to CMMC/NIST 800-171 domains</li> <li>Help you prepare for a real assessment with artifacts and references</li> </ul>"},{"location":"01_cmmc_intro/#this-guide-does-not","title":"\u274c This guide does not","text":"<ul> <li>Provide legal or official certification</li> <li>Guarantee pass/fail outcomes \u2014 that's up to your implementation and the C3PAO</li> <li>Cover CMMC Level 3 (based on NIST SP 800-172)</li> <li>Offer vendor-based \u201ccompliant in a box\u201d shortcuts</li> </ul> <p>Use this guide as a blueprint to build your own defensible, compliant, and resilient system.</p>"},{"location":"02_reference_architecture/","title":"\ud83d\udcd0 Section 2: Reference Architecture","text":""},{"location":"02_reference_architecture/#overview","title":"\ud83d\uddfa\ufe0f Overview","text":"<p>This section defines the reference architecture for the OpenCMMC Stack \u2014 a modular, FOSS-based platform built to help small and medium defense contractors meet the technical requirements of CMMC Level 2.</p> <p>The architecture emphasizes:</p> <ul> <li>Modularity: Each service can be deployed independently</li> <li>Zero Trust principles: No implicit trust between systems</li> <li>Rootless containment: Containerized services run with minimal privilege</li> <li>Auditability: Logs, configuration, and security posture can be exported for review</li> </ul>"},{"location":"02_reference_architecture/#architectural-layers","title":"\ud83e\uddf1 Architectural Layers","text":""},{"location":"02_reference_architecture/#1-infrastructure-layer","title":"1. Infrastructure Layer","text":"<ul> <li>Cloud-based or on-prem VM (e.g., DigitalOcean, Proxmox, AWS EC2)</li> <li>Hardened Ubuntu 22.04 LTS using Ansible</li> <li>Firewalling and segmentation using <code>ufw</code>, <code>fail2ban</code>, and Tailscale</li> </ul> <p>CMMC Domains: SC, AC, CM</p>"},{"location":"02_reference_architecture/#2-platform-services-layer","title":"2. Platform Services Layer","text":"Component Purpose CMMC Domains Podman Rootless container runtime CM, SC Systemd Declarative service orchestration CM, MA Auditd Kernel-level auditing AU AIDE File integrity monitoring SI Ansible Baseline enforcement and configuration CM, MA"},{"location":"02_reference_architecture/#3-security-identity-layer","title":"3. Security &amp; Identity Layer","text":"Component Purpose CMMC Domains Keycloak SSO, MFA, RBAC (OIDC &amp; SAML support) AC, IA Tailscale Identity-bound networking (Zero Trust) AC, SC Microsoft Entra ID (optional) External SAML IDP for hybrid ICAM AC, IA"},{"location":"02_reference_architecture/#4-application-services-layer","title":"4. Application Services Layer","text":"Component Purpose CMMC Domains Nextcloud AIO Secure file sharing, document collaboration, AV scanning, OnlyOffice, Talk MP, AC, SC Mailcow Secure email with TLS, DKIM, SPF SC, AC PostgreSQL (in AIO) Database backend for Nextcloud services SC, SI Redis (in AIO) Caching for Nextcloud performance SC <p>\ud83d\udd12 Nextcloud AIO is deployed as an all-in-one container behind NGINX Proxy Manager, offering full server-side encryption, integrated ClamAV, and team folder access control. It is functionally equivalent to the SharePoint + OneDrive components in Microsoft GCC High.</p>"},{"location":"02_reference_architecture/#5-monitoring-response-layer","title":"5. Monitoring &amp; Response Layer","text":"Component Purpose CMMC Domains Wazuh Centralized logging, alerting, SIEM AU, IR, SI Auditd Local event and command auditing AU Email Alerts Critical notification channel IR, SI"},{"location":"02_reference_architecture/#data-flow-overview","title":"\ud83d\udd04 Data Flow Overview","text":"<ol> <li>User authenticates via Keycloak using MFA.</li> <li>Tailscale tunnel is established for trusted remote access.</li> <li>User accesses services (Nextcloud AIO, Mailcow) over TLS.</li> <li>System logs events with <code>auditd</code>, <code>journalctl</code>, and <code>Wazuh</code>.</li> <li>AIDE checks file system integrity every 24 hours.</li> <li>Security policies are applied via Ansible on schedule or via trigger.</li> <li>Alerts and events are centralized in Wazuh and optionally forwarded to an external SIEM.</li> </ol>"},{"location":"02_reference_architecture/#compliance-focus","title":"\ud83d\udd0d Compliance Focus","text":"<p>This architecture supports the following CMMC Level 2 priorities:</p> <ul> <li>Scoping: Each component can be isolated within its own trust zone</li> <li>System Security Plan (SSP): All elements are declaratively defined (Terraform, Ansible)</li> <li>Evidence Generation: Logs, configuration files, and audit trails are exportable and reviewable</li> <li>Change Control: Containerized infrastructure ensures reproducibility and rollback capability</li> </ul>"},{"location":"02_reference_architecture/#architecture-diagram","title":"\ud83d\uddbc\ufe0f Architecture Diagram","text":"<p>Key updates: - Nextcloud AIO consolidates file services into one secure container - All access routed through NGINX Proxy Manager (TLS-terminated) - Trust boundaries clearly separate identity, infrastructure, and application services</p>"},{"location":"02_reference_architecture/#modular-deployment-strategy","title":"\ud83e\uddf0 Modular Deployment Strategy","text":"<p>All components are:</p> <ul> <li>Defined via infrastructure-as-code</li> <li>Deployed through Ansible playbooks</li> <li>Configurable to fit constrained environments (1\u20135 user orgs)</li> </ul> <p>This allows contractors to scale up or down depending on:</p> <ul> <li>Whether they process CUI directly</li> <li>Level of automation or monitoring desired</li> <li>Whether they use cloud, hybrid, or on-prem infrastructure</li> </ul>"},{"location":"02_reference_architecture/#want-to-see-how-this-all-connects","title":"\ud83e\udded Want to see how this all connects?","text":"<p>\u2192 View the full network &amp; topology diagram in Section 13: Infrastructure Architecture &amp; Interconnection</p>"},{"location":"03_provisioning/","title":"\ud83d\udce6 Section 3: Provisioning Infrastructure","text":""},{"location":"03_provisioning/#objective","title":"\ud83e\udded Objective","text":"<p>This section explains how to provision a secure virtual server for the OpenCMMC Stack using Infrastructure as Code (IaC). We use Terraform for automated provisioning and Ansible for post-deployment configuration.</p> <p>This environment will host your containerized, CMMC-aligned services and enforce key technical controls such as least privilege, rootless access, encryption, and system auditing from day one.</p> <p>\u2139\ufe0f NOTE: In the OpenCMMC Stack automation workflow, the host operating system is hardened immediately during provisioning using the <code>bootstrap.sh</code> script. As soon as the virtual machine is created, it uses <code>cloud-init</code> to install Ansible and apply the <code>secure_ubuntu.yml</code> role from Section 4. This ensures CMMC-aligned controls are enforced at first boot.</p>"},{"location":"03_provisioning/#target-environments","title":"\u2601\ufe0f Target Environments","text":"<p>This guide is compatible with:</p> <ul> <li>Cloud providers: DigitalOcean, AWS EC2, Hetzner Cloud, Linode</li> <li>On-premise: VirtualBox, VMware, or Proxmox (with manual adaptation)</li> <li>Bare metal: Supported via PXE or image-based deployment</li> </ul> <p>We demonstrate using DigitalOcean for simplicity and speed.</p>"},{"location":"03_provisioning/#required-tools","title":"\ud83e\uddf0 Required Tools","text":"<p>Before proceeding, install the following on your local workstation:</p> <ul> <li>Terraform CLI</li> <li>Ansible</li> <li>Python 3 &amp; pip</li> <li>SSH keypair for your user (<code>ssh-keygen</code>)</li> <li>DigitalOcean account and API token</li> </ul>"},{"location":"03_provisioning/#directory-layout","title":"\ud83d\udcc1 Directory Layout","text":"<p>Your cloned repo should look like this:</p> <pre><code>open-cmmc-stack/\n\u251c\u2500\u2500 terraform/\n\u2502   \u251c\u2500\u2500 main.tf\n\u2502   \u251c\u2500\u2500 variables.tf\n\u2502   \u251c\u2500\u2500 terraform.tfvars.example\n\u2502   \u2514\u2500\u2500 bootstrap.sh\n\u251c\u2500\u2500 ansible/\n\u2502   \u251c\u2500\u2500 secure_ubuntu.yml\n\u2502   \u2514\u2500\u2500 roles/\n\u2502       \u2514\u2500\u2500 secure_ubuntu/\n\u2502           \u2514\u2500\u2500 tasks/main.yml\n</code></pre>"},{"location":"03_provisioning/#step-by-step-provisioning-with-terraform","title":"\ud83d\ude80 Step-by-Step Provisioning with Terraform","text":""},{"location":"03_provisioning/#1-copy-and-customize-variable-values","title":"1. Copy and Customize Variable Values","text":"<pre><code>cp terraform/terraform.tfvars.example terraform/terraform.tfvars\n</code></pre> <p>Edit <code>terraform.tfvars</code> to include your actual DigitalOcean token and SSH key fingerprint.</p>"},{"location":"03_provisioning/#2-initialize-terraform","title":"2. Initialize Terraform","text":"<pre><code>cd terraform\nterraform init\n</code></pre>"},{"location":"03_provisioning/#3-apply-and-provision-the-droplet","title":"3. Apply and Provision the Droplet","text":"<pre><code>terraform apply\n</code></pre> <p>Terraform will create the VM, inject your SSH key, and use <code>bootstrap.sh</code> to start the Ansible hardening playbook.</p> <p>To retrieve the IP address of your new host:</p> <pre><code>terraform output -raw droplet_ip\n</code></pre> <p>You can then connect using:</p> <pre><code>ssh -i ~/.ssh/id_rsa cmmcadmin@$(terraform output -raw droplet_ip)\n</code></pre>"},{"location":"03_provisioning/#non-root-ssh-login","title":"\ud83e\uddd1\u200d\ud83d\udcbb Non-Root SSH Login","text":"<p>The Ansible hardening role will:</p> <ul> <li>Create a non-root user <code>cmmcadmin</code></li> <li>Add your public SSH key to <code>~/.ssh/authorized_keys</code></li> <li>Disable password login</li> <li>Disable SSH access for <code>root</code></li> <li>Enable and configure UFW to allow only SSH</li> </ul> <p>This ensures a minimum-privilege access posture from the start.</p>"},{"location":"03_provisioning/#terraform-file-descriptions","title":"\ud83d\udcdc Terraform File Descriptions","text":"<ul> <li><code>main.tf</code> \u2013 Defines the DigitalOcean droplet resource and provider</li> <li><code>variables.tf</code> \u2013 Declares expected inputs like <code>do_token</code> and <code>ssh_fingerprint</code></li> <li><code>terraform.tfvars.example</code> \u2013 Provides an example configuration you should copy and edit</li> <li><code>bootstrap.sh</code> \u2013 Runs on the VM after creation to install dependencies and run the hardening playbook automatically</li> </ul>"},{"location":"03_provisioning/#post-provision-checklist","title":"\ud83d\udccb Post-Provision Checklist","text":"<p>After provisioning, validate:</p> <ul> <li>SSH access using <code>cmmcadmin</code> and your private key</li> <li>Root login is disabled</li> <li>Firewall is active (<code>ufw status</code>)</li> <li>Ansible has applied initial hardening</li> </ul>"},{"location":"03_provisioning/#alternative-provision-manually-ansible-pull","title":"\ud83d\udd01 Alternative: Provision Manually + Ansible Pull","text":"<p>For air-gapped or restricted environments, you may:</p> <ol> <li>Provision an Ubuntu server manually</li> <li>Upload your SSH key</li> <li>Log in and run:</li> </ol> <pre><code>sudo apt update &amp;&amp; sudo apt install -y git ansible\ngit clone https://github.com/mtkell/open-cmmc-stack.git\ncd open-cmmc-stack/ansible\nansible-playbook -i localhost, secure_ubuntu.yml\n</code></pre>"},{"location":"03_provisioning/#relevant-cmmc-practices-addressed","title":"\ud83d\udcdc Relevant CMMC Practices Addressed","text":"CMMC Practice Description AC.1.001 Limit system access to authorized users CM.2.062 Employ security configuration baselines MA.3.115 Perform automated maintenance updates SC.3.177 Protect confidentiality with encrypted comms"},{"location":"03_provisioning/#infrastructure-provisioning-diagram","title":"\ud83d\uddbc\ufe0f Infrastructure Provisioning Diagram","text":"<p>To visualize this process, refer to the following diagram:</p> <pre><code>![Provisioning Infrastructure Overview](../img/svg/03_provisioning-detailed-diagram.svg)\n</code></pre> <p>The source Mermaid file is available at:</p> <pre><code>docs/img/diagrams/03_provisioning-detailed-diagram.mmd\n</code></pre>"},{"location":"03_provisioning/#next-step","title":"\u2705 Next Step","text":"<p>Once your infrastructure is provisioned and secured, proceed to Section 4: Securing the Host OS to continue the deployment of core CMMC capabilities.</p>"},{"location":"04_os_hardening/","title":"\ud83d\udee1\ufe0f Section 4: Securing the Host OS","text":""},{"location":"04_os_hardening/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section walks through hardening the Ubuntu 22.04 LTS host to meet the foundational system-level security expectations of CMMC Level 2. All configurations are managed using Ansible, enabling repeatability, version control, and audit readiness.</p> <p>\u2139\ufe0f NOTE: This hardening role is executed automatically during the provisioning phase (see Section 3) via the <code>bootstrap.sh</code> script included in the Terraform configuration. The secure baseline is applied during the first boot of the server. This section documents the tasks for audit clarity and allows for manual reapplication if needed.</p>"},{"location":"04_os_hardening/#host-hardening-checklist","title":"\ud83e\uddf1 Host Hardening Checklist","text":"<ul> <li>Disable password-based SSH access</li> <li>Enforce key-based login with limited user privileges</li> <li>Remove unnecessary packages and services</li> <li>Configure local firewall rules (UFW)</li> <li>Enforce strong password policies</li> <li>Enable system auditing (<code>auditd</code>)</li> <li>Install file integrity monitoring (<code>AIDE</code>)</li> <li>Apply system banners (AC.3.017)</li> <li>Schedule automatic security updates</li> </ul>"},{"location":"04_os_hardening/#step-by-step-with-ansible","title":"\ud83d\ude80 Step-by-Step with Ansible","text":"<p>All tasks are included in the role <code>roles/harden_ubuntu/</code>. Here's a breakdown:</p>"},{"location":"04_os_hardening/#1-disable-root-login-and-enforce-ssh-keys","title":"\ud83d\udd10 1. Disable Root Login and Enforce SSH Keys","text":"<pre><code>- name: Disable root login over SSH\n  lineinfile:\n    path: /etc/ssh/sshd_config\n    regexp: '^PermitRootLogin'\n    line: 'PermitRootLogin no'\n\n- name: Disable password authentication\n  lineinfile:\n    path: /etc/ssh/sshd_config\n    regexp: '^PasswordAuthentication'\n    line: 'PasswordAuthentication no'\n</code></pre>"},{"location":"04_os_hardening/#2-install-configure-ufw-firewall","title":"\ud83e\uddef 2. Install &amp; Configure UFW Firewall","text":"<pre><code>- name: Install UFW\n  apt:\n    name: ufw\n    state: present\n\n- name: Enable UFW with default deny\n  ufw:\n    state: enabled\n    policy: deny\n</code></pre> <p>Then explicitly allow needed ports:</p> <pre><code>- ufw:\n    rule: allow\n    port: \"22\"\n    proto: tcp\n</code></pre>"},{"location":"04_os_hardening/#3-configure-password-policies","title":"\ud83d\udccb 3. Configure Password Policies","text":"<pre><code>- name: Set password complexity\n  lineinfile:\n    path: /etc/security/pwquality.conf\n    regexp: '^minlen'\n    line: 'minlen = 14'\n</code></pre> <p>Add login lockout:</p> <pre><code>- name: Lock out after 5 failed attempts\n  lineinfile:\n    path: /etc/pam.d/common-auth\n    line: 'auth required pam_tally2.so deny=5 onerr=fail unlock_time=900'\n    create: yes\n</code></pre>"},{"location":"04_os_hardening/#4-configure-login-banners","title":"\ud83d\udcdd 4. Configure Login Banners","text":"<pre><code>- name: Create login banner\n  copy:\n    content: |\n      WARNING: This system is monitored and access is restricted to authorized users. \n      Unauthorized access may result in disciplinary or legal action.\n    dest: /etc/issue.net\n\n- name: Enable banner in sshd\n  lineinfile:\n    path: /etc/ssh/sshd_config\n    regexp: '^Banner'\n    line: 'Banner /etc/issue.net'\n</code></pre>"},{"location":"04_os_hardening/#5-enable-auditd-and-aide","title":"\ud83d\udcdc 5. Enable Auditd and AIDE","text":"<pre><code>- name: Install auditd and AIDE\n  apt:\n    name:\n      - auditd\n      - aide\n    state: present\n\n- name: Initialize AIDE DB\n  command: aideinit\n  args:\n    creates: /var/lib/aide/aide.db.gz\n</code></pre>"},{"location":"04_os_hardening/#6-enable-automatic-updates","title":"\ud83d\udd04 6. Enable Automatic Updates","text":"<pre><code>- name: Install unattended-upgrades\n  apt:\n    name: unattended-upgrades\n    state: present\n\n- name: Enable periodic security updates\n  copy:\n    dest: /etc/apt/apt.conf.d/20auto-upgrades\n    content: |\n      APT::Periodic::Update-Package-Lists \"1\";\n      APT::Periodic::Unattended-Upgrade \"1\";\n</code></pre>"},{"location":"04_os_hardening/#cmmc-practices-addressed","title":"\u2705 CMMC Practices Addressed","text":"CMMC Practice Purpose AC.1.001 Enforces user authentication boundaries AC.3.017 Displays warning banners CM.2.062 Applies baseline hardening SI.1.210 Enables audit and log generation SI.3.219 Supports detection of unauthorized changes"},{"location":"04_os_hardening/#notes","title":"\ud83d\udcce Notes","text":"<ul> <li>All hardening actions should be tested in a staging environment</li> <li>Logs from <code>auditd</code> and UFW should be forwarded to the SIEM layer (Wazuh or other)</li> <li>Password rules may be extended to include history and character diversity requirements</li> </ul>"},{"location":"04_os_hardening/#next-step","title":"\u25b6\ufe0f Next Step","text":"<p>With the base system secured, you\u2019re ready to deploy Identity &amp; Access Management using Keycloak and Tailscale in Section 5.</p>"},{"location":"05_identity_access/","title":"\ud83d\udd10 Section 5: Identity &amp; Access Management","text":""},{"location":"05_identity_access/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section explains how to implement centralized identity and access management (IAM) using two open-source tools:</p> <ul> <li>Keycloak for identity provider (IdP), SSO, MFA, and RBAC</li> <li>Tailscale for Zero Trust, device-aware access to internal services</li> </ul> <p>This aligns with CMMC Level 2 controls for Access Control (AC) and Identification &amp; Authentication (IA).</p>"},{"location":"05_identity_access/#why-keycloak","title":"\ud83e\udde9 Why Keycloak?","text":"<p>Keycloak is an enterprise-grade open-source IAM platform. It supports:</p> <ul> <li>SSO via OIDC and SAML 2.0</li> <li>Multi-factor authentication (TOTP, WebAuthn, Duo)</li> <li>Role-based access control</li> <li>LDAP, AD, and Entra ID federation</li> <li>Fine-grained session policies</li> </ul> <p>It integrates with applications like Nextcloud AIO, Mailcow, and Gitea.</p>"},{"location":"05_identity_access/#keycloak-deployment-via-ansible-and-podman","title":"\ud83d\udd27 Keycloak Deployment via Ansible and Podman","text":"<p>Keycloak should run as a systemd-managed, rootless Podman container. Example role:</p> <pre><code>- name: Run Keycloak container\n  containers.podman.podman_container:\n    name: keycloak\n    image: quay.io/keycloak/keycloak:24.0.2\n    state: started\n    detach: true\n    env:\n      KEYCLOAK_ADMIN: \"admin\"\n      KEYCLOAK_ADMIN_PASSWORD: \"supersecurepw\"\n    ports:\n      - \"8080:8080\"\n    command: \"start --optimized\"\n</code></pre> <p>Ensure reverse proxy TLS termination via NGINX Proxy Manager or Caddy.</p>"},{"location":"05_identity_access/#keycloak-configuration-steps","title":"\ud83d\udd10 Keycloak Configuration Steps","text":"<ol> <li>Log in to <code>http://yourhost:8080</code></li> <li>Create a realm (e.g., <code>OpenCMMC</code>)</li> <li>Create groups: <code>Access_CUI</code>, <code>Access_FCI</code>, <code>Access_Proprietary</code></li> <li>Enable MFA under Authentication &gt; Flows</li> <li>Register clients (Nextcloud AIO, Mailcow, Gitea)</li> <li>Use:</li> <li>OIDC for Mailcow and Gitea</li> <li>SAML for Nextcloud AIO</li> <li>Use <code>confidential</code> clients for server-to-server integration</li> </ol>"},{"location":"05_identity_access/#example-saml-integration-with-nextcloud-aio","title":"\ud83d\udcce Example: SAML Integration with Nextcloud AIO","text":"<ol> <li>In Keycloak:</li> <li>Create new SAML client (e.g., <code>nextcloud-aio</code>)</li> <li>Import metadata from:      <code>https://nextcloud.yourdomain.com/apps/user_saml/saml/metadata</code></li> <li> <p>Map attributes:</p> <ul> <li><code>uid</code> \u2192 <code>user.userprincipalname</code></li> <li><code>email</code> \u2192 <code>user.mail</code></li> <li><code>displayname</code> \u2192 <code>user.displayname</code></li> <li><code>groups</code> \u2192 <code>user.groups</code></li> </ul> </li> <li> <p>In Nextcloud AIO:</p> </li> <li>Enable SSO &amp; SAML authentication app</li> <li>Set UID attribute and display name/email fields</li> <li>Enable group mapping for Team Folder access control</li> </ol>"},{"location":"05_identity_access/#optional-federation-with-microsoft-entra-id","title":"\ud83c\udf10 Optional Federation with Microsoft Entra ID","text":"<p>To support hybrid ICAM or externally managed users:</p> <ul> <li>Create an Identity Provider in Keycloak using:</li> <li>Protocol: SAML</li> <li>IdP Entity ID: <code>https://sts.windows.net/&lt;tenant-id&gt;/</code></li> <li>SSO URL: <code>https://login.microsoftonline.com/&lt;tenant-id&gt;/saml2</code></li> <li>Import Microsoft X.509 certificate from Entra metadata</li> <li>Map incoming attributes to Keycloak realm users and groups</li> </ul> <p>This allows for a clean hybrid SSO flow: <code>Entra ID \u2192 Keycloak \u2192 Nextcloud AIO</code></p>"},{"location":"05_identity_access/#why-tailscale","title":"\ud83e\udde9 Why Tailscale?","text":"<p>Tailscale is a Zero Trust mesh VPN built on WireGuard. It provides:</p> <ul> <li>Device identity and encryption</li> <li>Automatic NAT traversal</li> <li>ACL policies enforced by user identity</li> <li>Built-in auditing and access logs</li> <li>Compatible with containerized infrastructure</li> </ul>"},{"location":"05_identity_access/#tailscale-deployment-server","title":"\u2699\ufe0f Tailscale Deployment (Server)","text":"<p>Install and authenticate:</p> <pre><code>curl -fsSL https://tailscale.com/install.sh | sh\nsudo tailscale up --authkey tskey-abc123\n</code></pre> <p>Use ephemeral or tag-based auth keys to automate provisioning in Terraform or Ansible.</p>"},{"location":"05_identity_access/#best-practice-protecting-admin-interfaces","title":"\ud83d\udd12 Best Practice: Protecting Admin Interfaces","text":"<p>Use Tailscale ACLs to expose sensitive ports (e.g., Keycloak admin, Mailcow admin, Nextcloud AIO console) only to specific users or device tags.</p> <p>Example ACL:</p> <pre><code>{\n  \"ACLs\": [\n    {\n      \"Action\": \"accept\",\n      \"Users\": [\"admin@yourdomain.com\"],\n      \"Ports\": [\"host1:8080\", \"host1:443\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"05_identity_access/#diagram-identity-access-flow","title":"\ud83d\uddbc\ufe0f Diagram: Identity &amp; Access Flow","text":""},{"location":"05_identity_access/#cmmc-practices-addressed","title":"\ud83d\udee1\ufe0f CMMC Practices Addressed","text":"CMMC Practice Description AC.1.001 Control access to systems and data AC.2.007 Use multifactor authentication for privileged users IA.1.076 Identify and authenticate organizational users AC.3.021 Enforce role-based access controls AC.3.022 Enforce network segregation and Zero Trust boundaries"},{"location":"05_identity_access/#next-step","title":"\u2705 Next Step","text":"<p>With centralized identity in place, the next phase is deploying user-facing collaboration services like Nextcloud AIO for file storage and Mailcow for secure email.</p>"},{"location":"06_file_storage/","title":"\ud83d\udcc1 Section 6: Secure File Sharing and Collaboration","text":""},{"location":"06_file_storage/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section details how to securely deploy Nextcloud All-in-One (AIO) \u2014 an integrated file sharing and collaboration platform that satisfies CMMC Level 2 requirements for Media Protection (MP), Access Control (AC), and System Communications Protection (SC).</p> <p>Nextcloud AIO consolidates secure storage, team collaboration, antivirus scanning, and file retention \u2014 enabling your organization to manage CUI without reliance on commercial SaaS platforms.</p>"},{"location":"06_file_storage/#why-nextcloud-aio","title":"\ud83e\udde9 Why Nextcloud AIO?","text":"<p>Nextcloud AIO offers:</p> <ul> <li>One hardened container with all critical components:</li> <li>Files, Calendar, Contacts, Mail, Talk, and OnlyOffice</li> <li>PostgreSQL, Redis, and ClamAV preconfigured</li> <li>Web-based file access with granular permissioning</li> <li>Built-in audit logging and file activity tracking</li> <li>SSO support via Keycloak (SAML)</li> <li>Server-side and optional client-side encryption</li> <li>Secure sharing and team folder access control</li> </ul>"},{"location":"06_file_storage/#deployment-with-podman","title":"\ud83d\udd27 Deployment with Podman","text":"<p>Nextcloud AIO runs as the only service in our stack using Docker. Everything else uses Podman. We isolate this with clear firewall and volume boundaries.</p> <pre><code>- name: Pull Nextcloud AIO container image\n  containers.podman.podman_image:\n    name: \"nextcloud/all-in-one:latest\"\n\n- name: Deploy Nextcloud AIO container\n  containers.podman.podman_container:\n    name: \"nextcloud-aio-mastercontainer\"\n    image: \"nextcloud/all-in-one:latest\"\n    state: started\n    restart_policy: always\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - \"/srv/nextcloud_data:/mnt/ncdata:z\"\n      - \"nextcloud_aio_mastercontainer:/mnt/docker-aio-config:z\"\n    env:\n      NEXTCLOUD_DATADIR: \"/mnt/ncdata\"\n</code></pre>"},{"location":"06_file_storage/#access-controls-with-keycloak","title":"\ud83d\udd12 Access Controls with Keycloak","text":"<p>Configure SSO for Nextcloud AIO:</p> <ul> <li>Install SSO &amp; SAML Authentication app in Nextcloud</li> <li>Set UID attribute to <code>user.userprincipalname</code></li> <li>Configure Keycloak to map attributes (SAML)</li> </ul> <p>Group access to Team Folders: - <code>Access_CUI</code> - <code>Access_FCI</code> - <code>Access_Proprietary</code></p>"},{"location":"06_file_storage/#architecture-diagram","title":"\ud83e\uddf0 Architecture Diagram","text":""},{"location":"06_file_storage/#cmmc-practices-addressed","title":"\ud83d\udee1\ufe0f CMMC Practices Addressed","text":"CMMC Practice Description AC.1.001 Restrict access to authorized users MP.1.118 Protect media containing CUI MP.2.119 Limit access to CUI on external systems SC.1.175 Use encryption to protect CUI in transit AU.2.042 Enable audit logs and access records"},{"location":"06_file_storage/#next-step","title":"\u2705 Next Step","text":"<p>Proceed to Section 7 to configure Mailcow for secure email services.</p>"},{"location":"07_email/","title":"\u2709\ufe0f Section 7: Secure Email","text":""},{"location":"07_email/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section provides guidance for deploying and securing a self-hosted email stack using Mailcow, an open-source mail server suite. The goal is to support CMMC Level 2 controls in the System and Communications Protection (SC) and Access Control (AC) domains while maintaining full ownership of email communications.</p>"},{"location":"07_email/#why-mailcow","title":"\ud83e\udde9 Why Mailcow?","text":"<p>Mailcow is a full-featured email platform that includes:</p> <ul> <li>Postfix (SMTP), Dovecot (IMAP/POP3)</li> <li>SOGo webmail client</li> <li>Rspamd for spam filtering</li> <li>DKIM, SPF, DMARC support</li> <li>Integrated ACME (Let's Encrypt) TLS</li> <li>LDAP and OIDC authentication support</li> </ul>"},{"location":"07_email/#mailcow-deployment-podman-example","title":"\ud83d\ude80 Mailcow Deployment (Podman Example)","text":"<p>Mailcow is normally deployed with Docker Compose, but you can adapt it for Podman.</p> <p>Clone the official Mailcow repo:</p> <pre><code>git clone https://github.com/mailcow/mailcow-dockerized\ncd mailcow-dockerized\ncp mailcow.conf.example mailcow.conf\n</code></pre> <p>Edit <code>mailcow.conf</code> to define hostname, timezone, and SSL settings. Then run:</p> <pre><code>podman-compose pull\npodman-compose up -d\n</code></pre> <p>For hardened systems, ensure containers use rootless Podman or are managed via <code>podman generate systemd</code>.</p>"},{"location":"07_email/#tls-dkim-and-spf-configuration","title":"\ud83d\udd12 TLS, DKIM, and SPF Configuration","text":"<p>Ensure the following are configured:</p> <ul> <li>TLS: Certificates automatically issued by Let\u2019s Encrypt</li> <li>SPF: Add a DNS TXT record pointing to your mail server IP</li> <li>DKIM: Enabled via Mailcow UI</li> <li>DMARC: Publish a DNS policy for your domain</li> </ul> <p>Test configuration via: - https://mail-tester.com - https://dmarcian.com/</p>"},{"location":"07_email/#integrating-with-keycloak-oidc","title":"\ud83d\udd10 Integrating with Keycloak (OIDC)","text":"<p>To enable Single Sign-On:</p> <ol> <li>Enable the OpenID plugin in Mailcow  </li> <li>In Keycloak, create a new OIDC client  </li> <li>Configure <code>client_id</code>, <code>client_secret</code>, redirect URI  </li> <li>Assign mail users to a realm group and map roles  </li> </ol> <p>Users can now authenticate with MFA and centralized SSO.</p>"},{"location":"07_email/#security-best-practices","title":"\ud83d\udee1\ufe0f Security Best Practices","text":"<ul> <li>Block SMTP auth on port 25 (use 587 with STARTTLS)</li> <li>Require strong passwords or MFA for all mail users</li> <li>Use fail2ban or equivalent to protect login endpoints</li> <li>Monitor mail logs with Wazuh or RSyslog for abuse</li> </ul>"},{"location":"07_email/#cmmc-practices-addressed","title":"\ud83d\udcdc CMMC Practices Addressed","text":"CMMC Practice Description AC.1.001 Restrict mail server access to authorized users AC.2.016 Control use of external systems SC.1.175 Protect CUI in transit with TLS SC.3.177 Protect communication channels from unauthorized access SI.1.210 Detect and alert on abnormal email activity"},{"location":"07_email/#next-step","title":"\u2705 Next Step","text":"<p>With secure email services in place, the next section focuses on monitoring and audit logging across your infrastructure using Wazuh and Auditd.</p>"},{"location":"08_logging_monitoring/","title":"\ud83d\udcca Section 8: Monitoring and Logging","text":""},{"location":"08_logging_monitoring/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section guides you through configuring a secure, scalable monitoring and logging stack using Wazuh, Auditd, and optional remote logging. These components support key CMMC Level 2 controls across Audit and Accountability (AU) and Security Incident Response (IR/SI) domains.</p>"},{"location":"08_logging_monitoring/#why-wazuh","title":"\ud83e\udde9 Why Wazuh?","text":"<p>Wazuh is a powerful open-source Security Information and Event Management (SIEM) solution that offers:</p> <ul> <li>Host-based intrusion detection (HIDS)</li> <li>Centralized log collection and analysis</li> <li>File integrity monitoring</li> <li>Rootkit and malware detection</li> <li>CMMC/NIST 800-171 rule packs</li> </ul> <p>It serves as the primary audit log and incident detection platform in the OpenCMMC stack.</p>"},{"location":"08_logging_monitoring/#deploying-wazuh-with-podman","title":"\ud83e\uddea Deploying Wazuh with Podman","text":"<pre><code>podman volume create wazuh_data\n\npodman run -d --name wazuh \\\n  -p 55000:55000 \\\n  -v wazuh_data:/var/ossec/data \\\n  docker.io/wazuh/wazuh:4.6.0\n</code></pre> <p>Optional: expose the dashboard via reverse proxy (NGINX) on HTTPS port <code>443</code>.</p>"},{"location":"08_logging_monitoring/#configure-auditd-local-audit-logging","title":"\ud83d\udccb Configure Auditd (Local Audit Logging)","text":"<p>Install and enable <code>auditd</code>:</p> <pre><code>sudo apt install auditd audispd-plugins\nsudo systemctl enable auditd --now\n</code></pre> <p>Define critical rules in <code>/etc/audit/rules.d/cmmc.rules</code>:</p> <pre><code>-w /etc/passwd -p wa -k identity\n-w /etc/shadow -p wa -k credentials\n-w /var/log/ -p wa -k logfiles\n</code></pre> <p>Reload rules:</p> <pre><code>sudo augenrules --load\n</code></pre>"},{"location":"08_logging_monitoring/#secure-logging-best-practices","title":"\ud83d\udd10 Secure Logging Best Practices","text":"<ul> <li>Enable log forwarding from <code>auditd</code> to <code>rsyslog</code>, and optionally to Wazuh</li> <li>Use TLS for remote log transmission (if using an external SIEM)</li> <li>Protect <code>/var/log</code> using strict permissions and AIDE</li> <li>Retain logs for a minimum of 90 days, per NIST 800-171 guidance</li> </ul>"},{"location":"08_logging_monitoring/#wazuh-agent-integration-optional-for-additional-hosts","title":"\ud83d\udee0\ufe0f Wazuh Agent Integration (Optional for Additional Hosts)","text":"<p>Install Wazuh agents on endpoints and configure secure connection to the Wazuh server using <code>authd</code>:</p> <pre><code>sudo /var/ossec/bin/agent-auth -m &lt;wazuh_server_ip&gt;\n</code></pre> <p>Use Wazuh\u2019s built-in compliance dashboard to validate:</p> <ul> <li>Policy violations</li> <li>Suspicious login activity</li> <li>File integrity issues</li> </ul>"},{"location":"08_logging_monitoring/#cmmc-practices-addressed","title":"\ud83d\udee1\ufe0f CMMC Practices Addressed","text":"CMMC Practice Description AU.2.042 Ensure audit records are reviewed and retained AU.2.043 Provide audit record protection AU.3.045 Review and analyze audit logs SI.1.210 Identify and report anomalous events IR.2.093 Detect and report incidents automatically"},{"location":"08_logging_monitoring/#next-step","title":"\u2705 Next Step","text":"<p>With monitoring and auditing in place, the next phase is configuring your container environment using hardened Podman runtimes and secure systemd services in Section 9: Application Hosting.</p>"},{"location":"09_container_runtime/","title":"\ud83d\udce6 Section 9: Application Hosting (Podman + systemd)","text":""},{"location":"09_container_runtime/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section describes how to securely host applications using Podman and systemd, focusing on container isolation, secure runtime options, and auditability \u2014 all aligned to CMMC Level 2 controls in Configuration Management (CM) and System &amp; Communications Protection (SC).</p>"},{"location":"09_container_runtime/#why-podman","title":"\ud83e\udde9 Why Podman?","text":"<p>Podman is a daemonless, rootless container engine that provides:</p> <ul> <li>Compatibility with Docker images and commands  </li> <li>Improved security by eliminating <code>dockerd</code> </li> <li>Native systemd integration for service orchestration  </li> <li>Compliance with Zero Trust and least privilege principles  </li> </ul>"},{"location":"09_container_runtime/#podman-rootless-setup-recap","title":"\ud83d\udd10 Podman Rootless Setup (Recap)","text":"<p>To enable rootless containers:</p> <pre><code>sudo apt install -y podman uidmap slirp4netns fuse-overlayfs\n</code></pre> <p>Verify with:</p> <pre><code>podman info --debug\n</code></pre> <p>Create a systemd unit to persist a service:</p> <pre><code>podman generate systemd \\\n  --name myservice \\\n  --files --restart-policy=always\n\nmkdir -p ~/.config/systemd/user\nmv container-myservice.service ~/.config/systemd/user/\n\nsystemctl --user daemon-reexec\nsystemctl --user enable --now container-myservice.service\n</code></pre>"},{"location":"09_container_runtime/#secure-runtime-flags","title":"\ud83d\udee1\ufe0f Secure Runtime Flags","text":"<p>Use the following Podman options for container hardening:</p> <pre><code>--cap-drop=ALL\n--read-only\n--security-opt no-new-privileges\n--userns=keep-id\n--pids-limit=100\n--memory=512m\n--cpu-shares=256\n</code></pre> <p>These settings enforce the principle of least privilege, memory limits, and user isolation.</p>"},{"location":"09_container_runtime/#managing-data-volumes","title":"\ud83d\uddc2\ufe0f Managing Data Volumes","text":"<p>Create named volumes for each service:</p> <pre><code>podman volume create nextcloud_data\npodman run -v nextcloud_data:/var/www/html ...\n</code></pre> <p>For bind mounts, always use:</p> <pre><code>-v /srv/data:/app/data:Z\n</code></pre> <p>This applies the correct SELinux label (<code>:Z</code> for shared access).</p>"},{"location":"09_container_runtime/#using-podman-compose-for-multi-service-deployments","title":"\ud83d\udd01 Using <code>podman-compose</code> for Multi-Service Deployments","text":"<p>Install using pipx:</p> <pre><code>pipx install podman-compose\n</code></pre> <p>Use standard <code>docker-compose.yml</code> files, but ensure:</p> <ul> <li>All image names are fully qualified (e.g., <code>docker.io/library/nginx</code>)  </li> <li>External networks exist in advance (<code>podman network create</code>)  </li> </ul>"},{"location":"09_container_runtime/#cmmc-practices-addressed","title":"\ud83d\udccb CMMC Practices Addressed","text":"CMMC Practice Description CM.2.062 Employ secure configurations for IT products SC.1.175 Protect CUI in transit between services SC.3.178 Prevent unauthorized communication between containers SI.1.210 Support log and runtime activity tracking AC.1.001 Control access to application resources"},{"location":"09_container_runtime/#next-step","title":"\u2705 Next Step","text":"<p>Now that your services are hosted securely in Podman, the next section covers backup and recovery strategies to protect CUI and ensure business continuity.</p>"},{"location":"10_backup_recovery/","title":"\ud83d\uddc4\ufe0f Section 10: Backup &amp; Recovery","text":""},{"location":"10_backup_recovery/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section provides guidance on establishing a secure, verifiable, and CMMC-aligned backup and recovery strategy for self-hosted infrastructure. It ensures organizations can recover from data loss, ransomware, or compromise while meeting System &amp; Information Integrity (SI) and Contingency Planning (CP) control requirements.</p>"},{"location":"10_backup_recovery/#why-this-matters","title":"\ud83e\udde9 Why This Matters","text":"<p>CMMC Level 2 requires not only backups but tested, restorable, secure backups. Many small businesses lose compliance due to poor validation, insecure storage, or unclear responsibilities.</p>"},{"location":"10_backup_recovery/#recommended-tools","title":"\ud83d\udd27 Recommended Tools","text":"Tool Purpose Restic Fast, encrypted backup with deduplication BorgBackup Efficient backups with compression Rclone Sync to cloud or remote endpoints <p>For consistency with automated deployments, this stack uses Restic by default.</p>"},{"location":"10_backup_recovery/#automated-backup-deployment-with-ansible","title":"\u2699\ufe0f Automated Backup Deployment with Ansible","text":"<p>The OpenCMMC Stack includes an Ansible role <code>roles/backup</code> that:</p> <ul> <li>Installs Restic via <code>apt</code></li> <li>Deploys a backup script from template</li> <li>Configures backup environment variables</li> <li>Sets up a systemd service and timer to run backups daily</li> </ul>"},{"location":"10_backup_recovery/#files-deployed","title":"Files Deployed:","text":"File Purpose <code>/usr/local/bin/restic-backup.sh</code> The backup script <code>/etc/restic/backup.env</code> Environment configuration for Restic <code>/etc/systemd/system/restic-backup.service</code> One-shot backup job <code>/etc/systemd/system/restic-backup.timer</code> Daily execution timer <p>This ensures consistent, auditable, and policy-driven backups aligned with CMMC expectations.</p>"},{"location":"10_backup_recovery/#what-the-backup-does","title":"\ud83e\uddea What the Backup Does","text":"<p>The deployed script performs:</p> <ol> <li>Daily backup of key service volumes (e.g., Nextcloud, PostgreSQL)</li> <li>Deduplicated and encrypted backup to local or remote repo</li> <li>Retention enforcement: <code>--keep-daily 7 --keep-weekly 4</code></li> <li>Log generation for review by assessors</li> </ol>"},{"location":"10_backup_recovery/#offsite-encrypted-backup-strategy","title":"\ud83d\udce5 Offsite &amp; Encrypted Backup Strategy","text":"<ul> <li>Push backups offsite using <code>restic -r s3:s3.amazonaws.com/mybucket</code></li> <li>Use strong encryption and separate key storage</li> <li>Store external backups in multiple regions (optional)</li> <li>Rotate and test encryption keys periodically</li> </ul>"},{"location":"10_backup_recovery/#restore-and-audit-strategy","title":"\ud83e\uddfe Restore and Audit Strategy","text":"<p>Test restores monthly with:</p> <p>restic restore latest --target /tmp/restore-test diff -r /tmp/restore-test/nextcloud_data /var/lib/docker/volumes/nextcloud_data</p> <p>Artifacts to maintain:</p> <ul> <li>Ansible backup role log or <code>ansible-playbook</code> run output</li> <li>Timer logs (<code>journalctl -u restic-backup.timer</code>)</li> <li>Screenshots or logs from restore tests</li> <li>An inventory of protected data and volumes</li> </ul>"},{"location":"10_backup_recovery/#cmmc-practices-addressed","title":"\ud83d\udee1\ufe0f CMMC Practices Addressed","text":"CMMC Practice Description CP.2.120 Establish backup strategy CP.3.143 Protect backups from unauthorized modification SI.1.210 Monitor for data integrity loss SI.2.216 Ensure data is recoverable following incident"},{"location":"10_backup_recovery/#next-step","title":"\u2705 Next Step","text":"<p>With resilient backups in place and automation enforced via Ansible and systemd, the next section walks through writing and mapping policies and procedures to support your technical controls.</p>"},{"location":"11_policies_procedures/","title":"\ud83d\udcda Section 11: Policies &amp; Procedures","text":""},{"location":"11_policies_procedures/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section outlines the process for aligning your technical implementation with the necessary written policies and procedures required under CMMC Level 2. Even the most secure infrastructure must be supported by documented intent, authority, and repeatable action.</p>"},{"location":"11_policies_procedures/#why-policies-matter","title":"\ud83e\udde9 Why Policies Matter","text":"<p>CMMC assessments evaluate more than technology. They look for:</p> <ul> <li>Policies: The \"what\" \u2014 formal statements of expectation or requirement  </li> <li>Procedures: The \"how\" \u2014 actionable, repeatable steps supporting the policy  </li> </ul> <p>Policies provide direction. Procedures provide execution. Both are required artifacts.</p>"},{"location":"11_policies_procedures/#core-policies-to-implement","title":"\ud83d\uddc2\ufe0f Core Policies to Implement","text":"Policy Name Related CMMC Domains Access Control Policy AC, IA Configuration Management CM Incident Response Policy IR Media Protection Policy MP System &amp; Communications SC System Integrity &amp; Audit AU, SI Backup &amp; Contingency Plan CP Personnel Security Policy PS Risk Management Policy RM <p>Each policy should include:</p> <ul> <li>Scope and purpose  </li> <li>Roles and responsibilities  </li> <li>High-level expectations  </li> <li>References to supporting procedures  </li> </ul>"},{"location":"11_policies_procedures/#procedure-examples","title":"\ud83d\udee0\ufe0f Procedure Examples","text":"<p>Procedures should be detailed, auditable, and mapped to specific practices.</p>"},{"location":"11_policies_procedures/#example-user-onboarding-procedure","title":"Example: User Onboarding Procedure","text":"<ul> <li>HR submits request to IT  </li> <li>IT generates user account in Keycloak  </li> <li>Assigns group memberships based on job role  </li> <li>Enforces MFA enrollment before first login  </li> <li>Logs provisioning in central system  </li> </ul> <p>Mapped to:</p> <ul> <li>AC.1.001: Limit access to authorized users  </li> <li>IA.1.076: Identify/authenticate users  </li> <li>AC.3.021: Role-based access  </li> </ul>"},{"location":"11_policies_procedures/#formatting-guidance","title":"\ud83d\udcdc Formatting Guidance","text":"<p>Use a consistent template for policies and procedures:</p> <pre><code># &lt;Policy Name&gt;\n\n## Purpose\n...\n\n## Scope\n...\n\n## Responsibilities\n...\n\n## Policy Statements\n...\n\n## References\n...\n\n## Review Cycle\nAnnually or upon significant system change\n</code></pre> <p>Save each policy as Markdown or PDF in a version-controlled repository.</p>"},{"location":"11_policies_procedures/#audit-artifacts-to-generate","title":"\ud83e\uddfe Audit Artifacts to Generate","text":"<ul> <li>Policy documents (signed or approved)  </li> <li>Procedures linked to technical systems  </li> <li>Revision history or change logs  </li> <li>Review schedules  </li> <li>Staff training records  </li> </ul>"},{"location":"11_policies_procedures/#cmmc-practices-addressed","title":"\ud83d\udee1\ufe0f CMMC Practices Addressed","text":"CMMC Practice Description CA.2.157 Define and enforce security policies CM.2.062 Document secure configurations AC.2.009 Limit unsuccessful login attempts IR.2.093 Establish incident handling process PS.2.129 Screen personnel before access to systems"},{"location":"11_policies_procedures/#next-step","title":"\u2705 Next Step","text":"<p>With policies in place, the final step is conducting a pre-assessment gap review and mapping your controls to System Security Plan (SSP) artifacts in Section 12.</p>"},{"location":"12_assessment_readiness/","title":"\ud83d\udcc4 Section 12: SSP &amp; Artifact Mapping","text":""},{"location":"12_assessment_readiness/#objective","title":"\ud83c\udfaf Objective","text":"<p>This final section guides you in creating your System Security Plan (SSP) and mapping real-world technical and administrative controls to the CMMC Level 2 practice requirements. The SSP is the cornerstone artifact for any CMMC assessment.</p>"},{"location":"12_assessment_readiness/#what-is-an-ssp","title":"\ud83d\udcd8 What is an SSP?","text":"<p>A System Security Plan is a formal document that:</p> <ul> <li>Describes the system or environment being assessed</li> <li>Identifies all components that handle CUI</li> <li>Maps controls to implementation details</li> <li>Assigns roles and responsibilities</li> <li>Documents supporting policies and procedures</li> </ul>"},{"location":"12_assessment_readiness/#required-ssp-components","title":"\ud83e\uddf0 Required SSP Components","text":"Section Description System Identification System name, boundaries, and scope Environment Description Diagrams, services, and interconnections System Components OS, containers, apps, and cloud resources CUI Data Flow Inbound/outbound data paths and classification Control Implementation Practice-by-practice response and mapping Roles and Responsibilities Who owns what in the security lifecycle References &amp; Artifacts Linked policies, diagrams, configs, logs"},{"location":"12_assessment_readiness/#ssp-control-mapping-format","title":"\ud83d\udccb SSP Control Mapping Format","text":"<p>For each of the 110 CMMC practices, create a record with:</p> <pre><code>## Practice ID: AC.1.001\n\n**Control Title**: Limit system access to authorized users\n\n**Implementation**:\nAccess to the Podman-hosted services (Nextcloud, Mailcow) is managed by Keycloak SSO with RBAC. Authentication is federated via Tailscale identity and Keycloak MFA. User accounts are provisioned via documented IT onboarding procedures.\n\n**Responsible Role**: IT Administrator\n\n**Supporting Artifacts**:\n- Access Control Policy\n- Keycloak Configuration Export\n- Tailscale ACL Rules\n- User Onboarding SOP\n</code></pre> <p>Repeat for all 110 practices.</p>"},{"location":"12_assessment_readiness/#artifact-checklist","title":"\ud83d\udcce Artifact Checklist","text":"<p>You should generate and store the following:</p> <ul> <li>Signed policies and SOPs</li> <li>Screenshots and logs of control evidence</li> <li>Terraform and Ansible playbooks</li> <li>Backup logs and restore tests</li> <li>Sample auditd and Wazuh alerts</li> <li>System architecture diagrams</li> <li>Evidence of MFA, least privilege, and encryption</li> </ul>"},{"location":"12_assessment_readiness/#ssp-template-starter","title":"\ud83d\uddc2\ufe0f SSP Template Starter","text":"<p>You can create your SSP in:</p> <ul> <li>Markdown with Git versioning</li> <li>Word/Excel using ProjectSpectrum.io template</li> <li>PDF for upload to eMASS or OSC repository</li> </ul>"},{"location":"12_assessment_readiness/#cmmc-practices-addressed","title":"\ud83d\udee1\ufe0f CMMC Practices Addressed","text":"CMMC Practice Description CA.2.157 Develop and manage an SSP CA.3.161 Update SSP to reflect changes CA.3.162 Map CUI flow and security boundaries RA.2.137 Maintain accurate system inventory AU.2.042 Provide traceable records and evidence"},{"location":"12_assessment_readiness/#congratulations","title":"\u2705 Congratulations!","text":"<p>You\u2019ve now completed the OpenCMMC Stack guide. You are prepared to generate audit-ready documentation, demonstrate technical alignment, and work toward CMMC Level 2 certification using only secure, auditable, open-source tools.</p>"},{"location":"13_architecture/","title":"Section 13: Infrastructure Architecture &amp; System Interconnection","text":"<p>\ud83d\udcda This section visually complements Section 2: Reference Architecture, where each component\u2019s function and compliance relevance is explained in detail.</p> <p>This section provides a comprehensive view of the Zero Trust-aligned FOSS architecture for small-to-medium defense contractors targeting CMMC Level 2 readiness. It includes a layered topology, component roles, and system interactions.</p>"},{"location":"13_architecture/#system-topology-overview","title":"\ud83d\uddfa\ufe0f System Topology Overview","text":"<p>The architecture below highlights how clients, core services, and perimeter components interact within a segmented and policy-enforced environment.</p>"},{"location":"13_architecture/#network-level-system-topology-mermaid","title":"\ud83d\udda7 Network-Level System Topology (Mermaid)","text":"<pre><code>graph LR\n  subgraph Internet\n    User[User (Browser, Client)]\n  end\n\n  subgraph \"DMZ (Zero Trust Proxy Layer)\"\n    NGINX[NGINX Proxy Manager\\n(TLS Termination)]\n  end\n\n  subgraph \"Internal Secure Docker Network\"\n    Keycloak[Keycloak\\n(SSO, MFA, RBAC)]\n    NC[Nextcloud AIO\\n(Files, AV, OnlyOffice, Talk)]\n    Mailcow[Mailcow\\n(SMTP, IMAP, Webmail)]\n    DB[Internal Services\\n(PostgreSQL, Redis)]\n  end\n\n  subgraph Optional[\"Optional External Identity Provider\"]\n    Entra[Microsoft Entra ID\\n(SAML Federation)]\n  end\n\n  User --&gt; NGINX\n  NGINX --&gt; Keycloak\n  NGINX --&gt; NC\n  NGINX --&gt; Mailcow\n\n  Keycloak --&gt; Entra\n  NC --&gt; DB\n  Mailcow --&gt; DB\n</code></pre>"},{"location":"13_architecture/#opencmmc-network-topology-svg","title":"\ud83d\udda7 OpenCMMC Network Topology (SVG)","text":""},{"location":"13_architecture/#component-interactions","title":"\ud83e\udde9 Component Interactions","text":""},{"location":"13_architecture/#identity-access-control","title":"Identity &amp; Access Control","text":"<ul> <li>All users authenticate via Keycloak with YubiKey, WebAuthn, or Microsoft Entra SAML Federation</li> <li>Authorization is scoped per application via Keycloak roles and group policies</li> <li>MFA is enforced for Mailcow, Nextcloud AIO, and Admin interfaces</li> </ul>"},{"location":"13_architecture/#certificate-authority","title":"Certificate Authority","text":"<ul> <li>Smallstep CA issues:</li> <li>S/MIME certificates for secure email</li> <li>Device certificates for Tailscale ACLs and VPN gateway access</li> <li>SSH certificates for privileged access with expiration</li> </ul>"},{"location":"13_architecture/#file-services-nextcloud-aio","title":"File Services (Nextcloud AIO)","text":"<ul> <li>AIO consolidates: file sharing, AV scanning, OnlyOffice, Talk, Redis, and PostgreSQL</li> <li>Deployed as a single secure container behind NGINX Proxy Manager</li> <li>Integrated with Keycloak via SAML for secure group-based access control</li> <li>Health-monitored with Uptime Kuma (<code>/status.php</code>)</li> </ul>"},{"location":"13_architecture/#network-enforcement","title":"Network Enforcement","text":"<ul> <li>DNS traffic is logged, filtered, and encrypted (DoT via Unbound)</li> <li>DHCP assigns IPs with MAC binding and leases tracked</li> <li>Tailscale creates an identity-aware overlay network with device segmentation</li> </ul>"},{"location":"13_architecture/#network-zones","title":"\ud83d\udd10 Network Zones","text":"Zone Description Perimeter Gateway and reverse proxies; interfaces with NGINX Proxy Manager Secure LAN Internal services with TLS + RBAC; includes Keycloak, Nextcloud AIO, Mailcow Client Zone Authenticated workstations and devices with identity-bound certs"},{"location":"13_architecture/#example-firewall-rules","title":"\ud83d\udce1 Example Firewall Rules","text":"Source Destination Protocols Description Clients DNS Server TCP/UDP 53 Internal DNS Clients Mailcow (SMTP/IMAP/HTTPS) TCP 465, 993, 443 Secure email access Clients Keycloak / SSO TCP 443 SSO &amp; MFA login Clients Tailscale Gateway UDP 41641 Overlay access Clients Nextcloud AIO TCP 443 via Proxy Secure file services"},{"location":"13_architecture/#monitoring-and-audit","title":"\ud83e\uddea Monitoring and Audit","text":"<ul> <li>Wazuh agents monitor system logs, auth attempts, and file integrity</li> <li>Health checks for AIO and Mailcow integrated with Uptime Kuma</li> <li>Alerting integrated with email and secure dashboard</li> <li>Auditd logs enriched by Filebeat and forwarded to Wazuh indexer</li> </ul>"},{"location":"13_architecture/#summary","title":"\ud83d\udcdd Summary","text":"<p>This reference architecture provides:</p> <ul> <li>Strong access control via SSO, MFA, and per-device policies</li> <li>End-to-end encryption through S/MIME and TLS-based services</li> <li>Identity-bound networking through device-issued certificates</li> <li>Full observability with integrated logging and alerting</li> <li>Simplified, auditable CUI collaboration using Nextcloud AIO</li> </ul> <p>This design aligns with core CMMC Level 2 controls including AC.1.001, AC.3.014, IA.3.083, and SC.12.3\u201312.5.</p>"},{"location":"14_deployment_guide/","title":"\ud83d\ude80 Section 14: Deployment Guide","text":""},{"location":"14_deployment_guide/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section outlines a step-by-step deployment path to implement the OpenCMMC Stack using fully automated, reproducible infrastructure-as-code workflows. Each phase corresponds to a tightly scoped operational unit aligned with CMMC Level 2 practices.</p>"},{"location":"14_deployment_guide/#overview-of-phases","title":"\ud83d\udccc Overview of Phases","text":"Phase Title Tools Used Evidence Folder 0 Planning &amp; Scope Definition Markdown, Diagrams <code>evidence/00_scoping/</code> 1 Terraform VM Provisioning Terraform <code>evidence/01_identity_access/</code> 2 Host Hardening with Ansible Ansible, UFW, AIDE <code>evidence/02_system_hardening/</code> 3 Podman-Based Service Container Setup Podman, Systemd <code>evidence/03_file_sharing/</code> 3A Secure File Sharing with Nextcloud Nextcloud AIO <code>evidence/03_file_sharing/</code> 4 Identity, MFA, and Cert Management Keycloak, ACME, SCEP <code>evidence/01_identity_access/</code> 5 Client Device Registration &amp; Policy Platform-specific MDM <code>evidence/01_identity_access/</code> 6 Logging, SIEM, and Alerting Wazuh, Auditd <code>evidence/05_monitoring/</code> 7 Validation, Screenshots &amp; Export Manual + CI <code>evidence/06_backups/</code>"},{"location":"14_deployment_guide/#how-to-use-this-section","title":"\u2699\ufe0f How to Use This Section","text":"<p>Each step in the deployment includes:</p> <ul> <li>\u2705 Playbook file and role used</li> <li>\ud83d\udcc1 Where to store your evidence</li> <li>\ud83d\udd17 Related diagrams</li> <li>\ud83d\udcdd References to corresponding SSP sections</li> </ul>"},{"location":"14_deployment_guide/#phase-0-planning-scope","title":"\ud83d\udcd0 Phase 0 \u2013 Planning &amp; Scope","text":"<p>Ensure all project stakeholders agree on:</p> <ul> <li>What systems process CUI or FCI</li> <li>Deployment boundaries (cloud/on-prem)</li> <li>Target number of users/devices</li> <li>DNS zones, certificate providers, and external access needs</li> </ul> <p>Artifacts to collect: - <code>network-topology.mmd</code> \u2192 <code>img/svg/</code> - <code>evidence_index.md</code> - Domain diagrams and port maps</p>"},{"location":"14_deployment_guide/#phase-1-provision-infrastructure-terraform","title":"\ud83e\uddf1 Phase 1 \u2013 Provision Infrastructure (Terraform)","text":"<pre><code>terraform init\nterraform apply\n</code></pre> <p>Evidence to collect: - Terraform plan/apply logs - Output IPs - SSH key fingerprints</p> <p>Artifacts: - <code>main.tf</code> - <code>bootstrap.sh</code> - <code>terraform.tfvars.example</code></p>"},{"location":"14_deployment_guide/#phase-2-harden-host-ansible","title":"\ud83d\udee1\ufe0f Phase 2 \u2013 Harden Host (Ansible)","text":"<pre><code>ansible-playbook -i inventory localhost playbooks/phase02_ansible_hardening.yml\n</code></pre> <p>Includes: - SSH lock-down - Password policy - Login banner - UFW and Auditd</p> <p>Artifacts: - <code>audit.log</code> - <code>sshd_config</code> - <code>aide.db.gz</code></p>"},{"location":"14_deployment_guide/#phase-3-podman-services","title":"\ud83d\udd27 Phase 3 \u2013 Podman Services","text":"<pre><code>ansible-playbook -i inventory localhost playbooks/phase03_podman_services.yml\n</code></pre> <p>Installs Podman and sets up:</p> <ul> <li>Rootless container runtime</li> <li>Systemd service wrappers</li> <li>Logging socket passthrough</li> </ul> <p>Artifacts: - Podman install logs - Systemd service manifests - Runtime socket test output</p>"},{"location":"14_deployment_guide/#phase-3a-deploy-secure-file-sharing-nextcloud-aio","title":"\ud83d\udcc2 Phase 3A \u2013 Deploy Secure File Sharing (Nextcloud AIO)","text":"<p>This step deploys the secure file collaboration environment using the <code>file_storage</code> Ansible role. It pulls the hardened Nextcloud All-in-One container and mounts persistent storage volumes to host CUI/FCI data.</p> <pre><code>ansible-playbook -i inventory localhost playbooks/phase03a_file_storage.yml\n</code></pre> <p>Artifacts from this step should be archived under <code>evidence/03_file_sharing/</code> including container logs, volume listings, and security posture verification.</p>"},{"location":"14_deployment_guide/#phase-4-identity-certificate-management","title":"\ud83d\udd10 Phase 4 \u2013 Identity &amp; Certificate Management","text":"<pre><code>ansible-playbook playbooks/phase04_identity_cert.yml\n</code></pre> <p>Includes: - Keycloak realm and MFA - External IdP setup (optional) - ACME DNS/HTTP validation - TLS termination config</p> <p>Artifacts: - Realm export JSON - Group mappings - Certbot or Step-CA logs</p>"},{"location":"14_deployment_guide/#phase-5-client-registration","title":"\ud83d\udcf1 Phase 5 \u2013 Client Registration","text":"<p>Includes: - Android/iOS/Windows/Mac device onboarding - Identity binding via Tailscale or LDAP - MDM enrollment or profile loading</p> <p>Artifacts: - MDM profile screenshots - Device join logs - VPN identity fingerprint</p>"},{"location":"14_deployment_guide/#phase-6-logging-siem-alerting","title":"\ud83d\udcca Phase 6 \u2013 Logging, SIEM &amp; Alerting","text":"<pre><code>ansible-playbook playbooks/phase06_logging_monitoring.yml\n</code></pre> <ul> <li>Wazuh deployment</li> <li>Central log forwarding (journald, auditd)</li> <li>Anomaly detection rules</li> </ul> <p>Artifacts: - Wazuh install logs - Sample alerts - Evidence forwarding screenshot</p>"},{"location":"14_deployment_guide/#phase-7-validation-export","title":"\u2705 Phase 7 \u2013 Validation &amp; Export","text":"<p>Compile final evidence set:</p> <ul> <li>Screenshot walkthrough</li> <li>Playbook run logs</li> <li>Log integrity export</li> <li>SSP references and traceability</li> </ul> <p>Export Markdown to PDF:</p> <pre><code>mkdocs build\n</code></pre>"},{"location":"14_deployment_guide/#return-to-readmemd-or-proceed-to-section-15-secops-sops","title":"\u2b05\ufe0f Return to README.md or proceed to Section 15: SecOps SOPs","text":""},{"location":"14_deployment_guide/01_planning/","title":"Phase 0: Planning &amp; Scoping","text":"<p>Before deploying any infrastructure, it is essential to define the mission, scope, and compliance goals that your system must meet. This includes identifying data types (FCI, CUI), user roles, system boundaries, and operational constraints.</p>"},{"location":"14_deployment_guide/01_planning/#objectives","title":"\ud83c\udfaf Objectives","text":"<ul> <li>Define compliance scope (FCI/CUI, enclave size)</li> <li>Create logical zones and data flows</li> <li>Identify required services and endpoints</li> <li>Begin drafting System Security Plan (SSP)</li> </ul>"},{"location":"14_deployment_guide/01_planning/#identify-scope-of-cmmc-applicability","title":"\ud83d\udd0d Identify Scope of CMMC Applicability","text":"<p>Ask:</p> <ul> <li>What systems or processes handle CUI or FCI?</li> <li>Which users require remote access?</li> <li>Are mobile or BYOD devices allowed?</li> </ul> <p>Use this input to build your system boundary.</p>"},{"location":"14_deployment_guide/01_planning/#map-trust-zones-and-interfaces","title":"\ud83e\udde9 Map Trust Zones and Interfaces","text":"<p>Define basic segmentation such as:</p> <ul> <li><code>DMZ</code>: External access points (e.g., reverse proxy)</li> <li><code>LAN</code>: Internal services (Keycloak, Mailcow, CA)</li> <li><code>Mgmt</code>: Administrative interfaces (Wazuh, Step-CA)</li> <li><code>VPN/Overlay</code>: Tailscale Zero Trust mesh</li> <li><code>Clients</code>: End-user systems</li> </ul>"},{"location":"14_deployment_guide/01_planning/#define-required-services","title":"\ud83d\udce5 Define Required Services","text":"Service Function Keycloak SSO, MFA, access control Mailcow Email w/ S/MIME Step-CA Internal certificate issuance Tailscale Device-aware VPN/overlay Nextcloud Secure file sharing Wazuh Centralized monitoring &amp; alerting"},{"location":"14_deployment_guide/01_planning/#ssp-preparation-tasks","title":"\ud83d\udccb SSP Preparation Tasks","text":"<p>Start drafting:</p> <ul> <li>System description and trust zones</li> <li>Roles and responsibilities</li> <li>Component inventory</li> <li>Control implementation intentions (CUI isolation, audit trails)</li> </ul>"},{"location":"14_deployment_guide/01_planning/#output-of-this-phase","title":"\u2705 Output of This Phase","text":"<ul> <li>Scoping document</li> <li>Preliminary SSP outline</li> <li>Diagram of zones and required services</li> <li>Decision log for internal vs. cloud hosting</li> </ul> <p>\u2192 Proceed to Phase 1: Terraform Provisioning</p>"},{"location":"14_deployment_guide/02_terraform_provisioning/","title":"Phase 1: Terraform Infrastructure Provisioning","text":"<p>This phase provisions the baseline infrastructure using Terraform, establishing a consistent and repeatable environment for CMMC-aligned services. It supports both cloud-based and on-premise deployments (e.g., DigitalOcean, Proxmox, VMware).</p>"},{"location":"14_deployment_guide/02_terraform_provisioning/#phase-1-infrastructure-provisioning-terraform","title":"\ud83d\udee0 Phase 1 \u2013 Infrastructure Provisioning (Terraform)","text":""},{"location":"14_deployment_guide/02_terraform_provisioning/#tools-required","title":"\ud83e\uddf0 Tools Required","text":"<ul> <li>Terraform CLI</li> <li>Access credentials for your cloud or hypervisor provider</li> <li>SSH key pair (<code>id_rsa</code>, <code>id_rsa.pub</code>) for Ansible provisioning</li> <li>Predefined VPC, firewall rules, or isolated network</li> </ul>"},{"location":"14_deployment_guide/02_terraform_provisioning/#terraform-structure","title":"\ud83e\uddf1 Terraform Structure","text":"<p>Recommended folder layout:</p> <pre><code>terraform/\n\u251c\u2500\u2500 main.tf\n\u251c\u2500\u2500 variables.tf\n\u251c\u2500\u2500 terraform.tfvars\n\u2514\u2500\u2500 outputs.tf\n</code></pre>"},{"location":"14_deployment_guide/02_terraform_provisioning/#sample-maintf-digitalocean","title":"\ud83c\udf10 Sample <code>main.tf</code> (DigitalOcean)","text":"<pre><code>provider \"digitalocean\" {\n  token = var.do_token\n}\n\nresource \"digitalocean_droplet\" \"cmmc_host\" {\n  name   = \"cmmc-foss-server\"\n  region = var.region\n  size   = var.size\n  image  = \"ubuntu-22-04-x64\"\n\n  ssh_keys = [var.ssh_key_fingerprint]\n\n  tags = [\"cmmc\", \"infrastructure\"]\n}\n</code></pre>"},{"location":"14_deployment_guide/02_terraform_provisioning/#define-variables-variablestf","title":"\ud83d\udce6 Define Variables (<code>variables.tf</code>)","text":"<pre><code>variable \"do_token\" {}\nvariable \"region\"   { default = \"nyc3\" }\nvariable \"size\"     { default = \"s-2vcpu-4gb\" }\nvariable \"ssh_key_fingerprint\" {}\n</code></pre>"},{"location":"14_deployment_guide/02_terraform_provisioning/#add-secrets-terraformtfvars","title":"\ud83d\udd10 Add Secrets (<code>terraform.tfvars</code>)","text":"<pre><code>do_token             = \"your_do_token_here\"\nssh_key_fingerprint  = \"your_fingerprint\"\n</code></pre>"},{"location":"14_deployment_guide/02_terraform_provisioning/#on-prem-alternative-proxmox","title":"\ud83d\udda5\ufe0f On-Prem Alternative (Proxmox)","text":"<p>Use <code>proxmox</code> provider or provision VMs via Ansible + cloud-init. Details can be added in an advanced appendix.</p>"},{"location":"14_deployment_guide/02_terraform_provisioning/#output-of-this-phase","title":"\u2705 Output of This Phase","text":"<ul> <li>One or more hardened Ubuntu 22.04 VMs</li> <li>SSH key access for provisioning</li> <li>IP addresses or DNS names for Ansible roles</li> </ul> <p>\u2192 Proceed to Phase 2: OS Hardening with Ansible</p>"},{"location":"14_deployment_guide/03_ansible_hardening/","title":"Phase 2: OS Hardening with Ansible","text":"<p>This phase configures the secure operating system baseline using Ansible. It applies hardened system defaults and prepares the host for rootless container deployment using Podman.</p>"},{"location":"14_deployment_guide/03_ansible_hardening/#phase-2-os-hardening-with-ansible_1","title":"\ud83d\udee1 Phase 2 \u2013 OS Hardening with Ansible","text":""},{"location":"14_deployment_guide/03_ansible_hardening/#tools-required","title":"\ud83e\uddf0 Tools Required","text":"<ul> <li>Ansible</li> <li>SSH key access to provisioned VM(s)</li> <li>Hardened role or playbook (custom or from <code>dev-sec/ansible-collection-hardening</code>)</li> </ul>"},{"location":"14_deployment_guide/03_ansible_hardening/#security-controls-implemented","title":"\ud83d\udee1\ufe0f Security Controls Implemented","text":"Control Area Control Access Control (AC) SSH lockdown, sudo restrictions System Integrity (SI) AIDE, auditd, tamper detection Configuration Management (CM) Idempotent playbooks Security Protection (SC) ufw, fail2ban, automatic updates"},{"location":"14_deployment_guide/03_ansible_hardening/#suggested-folder-layout","title":"\ud83d\udcc1 Suggested Folder Layout","text":"<pre><code>ansible/\n\u251c\u2500\u2500 inventory/\n\u2502   \u2514\u2500\u2500 hosts.ini\n\u251c\u2500\u2500 playbooks/\n\u2502   \u2514\u2500\u2500 hardening.yml\n\u251c\u2500\u2500 roles/\n\u2502   \u2514\u2500\u2500 hardening/\n</code></pre>"},{"location":"14_deployment_guide/03_ansible_hardening/#sample-playbookshardeningyml","title":"\ud83e\uddea Sample <code>playbooks/hardening.yml</code>","text":"<pre><code>- name: Apply hardening to base OS\n  hosts: all\n  become: yes\n  roles:\n    - role: hardening\n</code></pre>"},{"location":"14_deployment_guide/03_ansible_hardening/#what-the-role-should-do","title":"\u2699\ufe0f What the Role Should Do","text":"<ul> <li>Disable root SSH access</li> <li>Enable firewall (ufw)</li> <li>Set minimum password complexity</li> <li>Install &amp; configure:</li> <li><code>auditd</code></li> <li><code>aide</code></li> <li><code>fail2ban</code></li> <li><code>unattended-upgrades</code></li> </ul>"},{"location":"14_deployment_guide/03_ansible_hardening/#verification-tasks","title":"\ud83d\udcdd Verification Tasks","text":"<ul> <li>Run <code>aideinit</code> and confirm baseline creation</li> <li>Run <code>auditctl -l</code> and <code>journalctl</code> to confirm logs</li> <li>Test fail2ban trigger via SSH login attempts</li> </ul>"},{"location":"14_deployment_guide/03_ansible_hardening/#output-of-this-phase","title":"\u2705 Output of This Phase","text":"<ul> <li>A hardened base system per CIS Level 1 guidance</li> <li>Ansible inventory + role ready for future updates</li> <li>Rootless <code>podman</code> installed and tested</li> </ul> <p>\u2192 Proceed to Phase 3: Podman Service Deployment</p>"},{"location":"14_deployment_guide/04_podman_services/","title":"\ud83e\udde9 Phase 3: Podman Services Deployment","text":""},{"location":"14_deployment_guide/04_podman_services/#objective","title":"\ud83c\udfaf Objective","text":"<p>This phase installs and configures the core Podman-based services used throughout the OpenCMMC Stack. It leverages an Ansible role to run secure, rootless containers for various components, except for Nextcloud AIO, which remains a hardened Docker container due to its upstream architecture.</p>"},{"location":"14_deployment_guide/04_podman_services/#role-podman_services","title":"\ud83d\udce6 Role: <code>podman_services</code>","text":"<p>The <code>podman_services</code> Ansible role handles:</p> <ul> <li>Pulling images via Podman</li> <li>Deploying containers as systemd-managed services</li> <li>Restart policies and volume bindings</li> <li>Managing containers declaratively from a variable file</li> </ul> <p>All Podman-managed containers run rootless under defined service accounts and can be expanded modularly.</p>"},{"location":"14_deployment_guide/04_podman_services/#example-usage","title":"\ud83e\uddfe Example Usage","text":"<pre><code>- name: Deploy Podman services\n  hosts: localhost\n  become: yes\n  roles:\n    - role: podman_services\n</code></pre> <p>Edit the <code>defaults/main.yml</code> to declare your container list:</p> <pre><code>podman_services:\n  - name: keycloak\n    image: quay.io/keycloak/keycloak:24.0.2\n    ports:\n      - \"8080:8080\"\n    volumes:\n      - \"/opt/keycloak:/data:z\"\n    env:\n      KEYCLOAK_ADMIN: admin\n      KEYCLOAK_ADMIN_PASSWORD: changeme\n</code></pre>"},{"location":"14_deployment_guide/04_podman_services/#optional-service-layout-manual-pods","title":"\ud83e\uddf1 Optional Service Layout (Manual Pods)","text":"<p>Some organizations may still use a pod structure like below:</p> <pre><code>services/\n\u251c\u2500\u2500 keycloak/\n\u2502   \u2514\u2500\u2500 podman-compose.yml\n\u251c\u2500\u2500 mailcow/\n\u2502   \u2514\u2500\u2500 podman-compose.yml\n\u251c\u2500\u2500 wazuh/\n\u2502   \u2514\u2500\u2500 podman-compose.yml\n\u251c\u2500\u2500 step-ca/\n\u2502   \u2514\u2500\u2500 podman-compose.yml\n\u2514\u2500\u2500 aio-launcher/\n    \u2514\u2500\u2500 docker-run.sh  # used for Nextcloud AIO\n</code></pre> <p>Each service directory includes:</p> <ul> <li><code>podman-compose.yml</code> or single-container runner script</li> <li><code>.env</code> file (secured)</li> <li>Optional systemd unit templates</li> </ul> <p>However, the <code>podman_services</code> role supersedes the need for manual pod structures.</p>"},{"location":"14_deployment_guide/04_podman_services/#example-systemd-unit-optional","title":"\u2699\ufe0f Example Systemd Unit (Optional)","text":"<pre><code>[Unit]\nDescription=Podman container for Keycloak\nWants=network.target\nAfter=network.target\n\n[Service]\nUser=svc_keycloak\nExecStart=/usr/bin/podman run --rm quay.io/keycloak/keycloak:24.0.2\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>In most cases, this is replaced with Ansible-deployed <code>podman_container</code> modules and pre-written units.</p>"},{"location":"14_deployment_guide/04_podman_services/#security-considerations","title":"\ud83d\udd12 Security Considerations","text":"<ul> <li>All Podman containers run as non-root service accounts</li> <li>Use <code>:z</code> SELinux volume labels for confined access</li> <li>Isolate each service to private networks where possible</li> <li>Do not expose ports directly to WAN without reverse proxy</li> <li>Enforce container logs forwarding to Wazuh</li> </ul>"},{"location":"14_deployment_guide/04_podman_services/#exception-nextcloud-aio-docker","title":"\u26a0\ufe0f Exception: Nextcloud AIO (Docker)","text":"<p>Nextcloud AIO is a single Docker container that includes:</p> <ul> <li>Redis</li> <li>PostgreSQL</li> <li>ClamAV</li> <li>OnlyOffice</li> <li>Nextcloud core</li> </ul> <pre><code>docker run -d \\\n  --name nextcloud-aio-mastercontainer \\\n  --restart always \\\n  -p 8080:8080 \\\n  -v nextcloud_aio_mastercontainer:/mnt/docker-aio-config \\\n  -e NEXTCLOUD_DATADIR=\"/mnt/ncdata\" \\\n  nextcloud/all-in-one:latest\n</code></pre> <p>This container is managed via the <code>file_storage</code> role in Phase 3a and must be:</p> <ul> <li>Placed behind NGINX Proxy Manager</li> <li>Included in your Tailscale ACLs</li> <li>Backed up via volume mount <code>/mnt/ncdata</code></li> </ul>"},{"location":"14_deployment_guide/04_podman_services/#cmmc-practices-mapped","title":"\ud83d\udcdc CMMC Practices Mapped","text":"CMMC Practice Description CM.2.064 Track and approve software components AC.3.021 Use role-based service separation SC.3.177 Encrypt data flows within containers AU.2.042 Enable logging from Podman containers MA.3.115 Support automated service restarts"},{"location":"14_deployment_guide/04_podman_services/#output-of-this-phase","title":"\u2705 Output of This Phase","text":"<ul> <li>Podman-deployed containers configured via Ansible</li> <li>Secure container runtime fully integrated</li> <li>Nextcloud AIO Docker container ready for launch in Phase 3a</li> </ul> <p>\u2192 Continue to Phase 3a: File Collaboration Services with Nextcloud AIO</p>"},{"location":"14_deployment_guide/05_identity_cert_mgmt/","title":"Phase 4: Identity, Certificates, and Access Control","text":"<p>In this phase, we configure centralized authentication and Zero Trust identity enforcement using Keycloak for SSO + MFA and Smallstep CA for certificates (TLS, SSH, and S/MIME).</p>"},{"location":"14_deployment_guide/05_identity_cert_mgmt/#phase-4-identity-and-certificate-management","title":"\ud83d\udd10 Phase 4 \u2013 Identity and Certificate Management","text":""},{"location":"14_deployment_guide/05_identity_cert_mgmt/#components","title":"\ud83e\udde9 Components","text":"Tool Role Keycloak Identity Provider (SSO, MFA, RBAC) Smallstep CA Internal Certificate Authority Tailscale Device-aware overlay VPN"},{"location":"14_deployment_guide/05_identity_cert_mgmt/#keycloak-setup","title":"\ud83d\udd10 Keycloak Setup","text":"<ol> <li>Create a realm (e.g., <code>cmmc</code>)</li> <li>Define groups:</li> <li><code>admins</code>, <code>users</code>, <code>remote-only</code>, etc.</li> <li>Enable MFA:</li> <li>Under authentication flows, add WebAuthn or OTP</li> <li>Create OIDC clients for:</li> <li>Mailcow, Nextcloud, Wazuh Dashboard, Caddy</li> </ol>"},{"location":"14_deployment_guide/05_identity_cert_mgmt/#smallstep-ca-setup","title":"\ud83d\udcdc Smallstep CA Setup","text":"<ol> <li>Initialize CA:</li> </ol> <pre><code>step ca init\n</code></pre> <ol> <li>Issue user certificate for S/MIME:</li> </ol> <pre><code>step ca certificate \"Alice Example\" alice@example.com alice.p12\n</code></pre> <ol> <li>Issue device certificate:</li> </ol> <pre><code>step ca certificate device1 device1.kell.local device1.crt device1.key\n</code></pre> <ol> <li>Configure Caddy, Mailcow, and SSH to use certs from CA</li> </ol>"},{"location":"14_deployment_guide/05_identity_cert_mgmt/#tailscale-integration","title":"\ud83d\udd78 Tailscale Integration","text":"<ul> <li>Devices join tailnet using identity login</li> <li>Define ACLs in <code>tailscale.com/admin/acls</code></li> <li>Map access by Keycloak groups or device tags</li> </ul>"},{"location":"14_deployment_guide/05_identity_cert_mgmt/#zero-trust-policies-to-enforce","title":"\ud83d\udd12 Zero Trust Policies to Enforce","text":"<ul> <li>No service trust without cert</li> <li>Admin access requires MFA + device cert</li> <li>Audit login attempts via Keycloak and Step-CA logs</li> </ul>"},{"location":"14_deployment_guide/05_identity_cert_mgmt/#output-of-this-phase","title":"\u2705 Output of This Phase","text":"<ul> <li>Identity provider enforced for all apps</li> <li>Certs issued to users, devices, and internal services</li> <li>ACLs defined to isolate roles and data types</li> </ul> <p>\u2192 Proceed to Phase 5: Client Device Registration</p>"},{"location":"14_deployment_guide/06_client_registration/","title":"Phase 5: Client Device Registration","text":"<p>This phase enables end-user devices\u2014Windows, macOS, Linux, iOS, and Android\u2014to securely connect to your internal services using SSO, certificates, and Zero Trust overlay networking.</p>"},{"location":"14_deployment_guide/06_client_registration/#phase-5-client-registration-and-access","title":"\ud83d\udcbb Phase 5 \u2013 Client Registration and Access","text":""},{"location":"14_deployment_guide/06_client_registration/#supported-platforms","title":"\ud83d\udcbb Supported Platforms","text":"OS Access Method Services Used Windows Tailscale + Browser Nextcloud, Webmail, SSO macOS Tailscale + Mail.app S/MIME, Webmail, Files Linux Tailscale + Thunderbird SSH, S/MIME, Web Android Tailscale + K9 Mail S/MIME + Nextcloud App iOS Tailscale + Safari Apple Mail + Web Access"},{"location":"14_deployment_guide/06_client_registration/#general-steps","title":"\ud83d\udd10 General Steps","text":""},{"location":"14_deployment_guide/06_client_registration/#1-import-identity-certificate","title":"1. Import Identity Certificate","text":"<ul> <li>Issue <code>.p12</code> or <code>.pem</code> via Step-CA or secure portal</li> <li>Windows: Import into Personal Certificate Store</li> <li>macOS/iOS: Use Apple Configurator profile</li> <li>Linux: Import into Thunderbird or GPG-based tool</li> <li>Android: Import via settings or K-9 Mail</li> </ul>"},{"location":"14_deployment_guide/06_client_registration/#2-join-tailscale","title":"2. Join Tailscale","text":"<ul> <li>Install Tailscale client</li> <li>Login using SSO from Keycloak (OIDC)</li> <li>Verify tailnet ACLs enforce proper segmentation</li> <li>Label devices and assign tags in admin panel</li> </ul>"},{"location":"14_deployment_guide/06_client_registration/#3-configure-email","title":"3. Configure Email","text":"<ul> <li>Set up Mailcow with SOGo or external clients</li> <li>Use STARTTLS/SMTPS on 465 or 587 with S/MIME signing</li> </ul>"},{"location":"14_deployment_guide/06_client_registration/#4-access-nextcloud-or-internal-services","title":"4. Access Nextcloud or Internal Services","text":"<ul> <li>Use browser login (SSO-enabled)</li> <li>Or native apps configured with device cert auth</li> </ul>"},{"location":"14_deployment_guide/06_client_registration/#device-policy-best-practices","title":"\ud83d\udd12 Device Policy Best Practices","text":"<ul> <li>Use system disk encryption (BitLocker, FileVault)</li> <li>Require password + hardware MFA (YubiKey/WebAuthn)</li> <li>Disable root access where not needed</li> <li>Automatically expire old device certificates</li> <li>Monitor device behavior via Wazuh</li> </ul>"},{"location":"14_deployment_guide/06_client_registration/#output-of-this-phase","title":"\u2705 Output of This Phase","text":"<ul> <li>Client devices trusted via cert, auth, and overlay</li> <li>Secure mail, file sync, and SSO login validated</li> <li>End-to-end encrypted access for remote and on-site users</li> </ul> <p>\u2192 Proceed to Phase 6: Logging, SIEM, and Alerting</p>"},{"location":"14_deployment_guide/07_logging_monitoring/","title":"Phase 6: Logging, SIEM, and Alerting","text":"<p>This phase integrates centralized logging and monitoring using Wazuh, providing visibility into authentication, file changes, system events, and potential threats.</p>"},{"location":"14_deployment_guide/07_logging_monitoring/#phase-6-logging-and-monitoring-wazuh","title":"\ud83d\udcca Phase 6 \u2013 Logging and Monitoring (Wazuh)","text":""},{"location":"14_deployment_guide/07_logging_monitoring/#tools-used","title":"\ud83e\uddf0 Tools Used","text":"<ul> <li>Wazuh Server</li> <li>Wazuh Agent (deployed to all hosts)</li> <li>Podman containerized dashboard (Kibana-like)</li> <li>Optional forwarding to external SIEM (e.g., Elastic, Splunk)</li> </ul>"},{"location":"14_deployment_guide/07_logging_monitoring/#events-to-monitor","title":"\ud83d\udce6 Events to Monitor","text":"Source Example Events Keycloak Failed logins, MFA bypass attempts Step-CA Cert issuance and revocation logs Mailcow SMTP errors, login attempts OS (auditd) User creation, sudo, file changes Wazuh Agent File integrity, process activity"},{"location":"14_deployment_guide/07_logging_monitoring/#sample-ansible-task-to-deploy-wazuh-agent","title":"\ud83e\uddea Sample Ansible Task to Deploy Wazuh Agent","text":"<pre><code>- name: Install and enroll Wazuh agent\n  hosts: all\n  become: yes\n  tasks:\n    - name: Add Wazuh repo and install agent\n      apt:\n        name: wazuh-agent\n        state: present\n    - name: Configure agent to connect to Wazuh server\n      lineinfile:\n        path: /var/ossec/etc/ossec.conf\n        regexp: '&lt;address&gt;'\n        line: '  &lt;address&gt;wazuh.kell.local&lt;/address&gt;'\n</code></pre>"},{"location":"14_deployment_guide/07_logging_monitoring/#dashboards-alerts","title":"\ud83d\udcca Dashboards &amp; Alerts","text":"<ul> <li>Customize alerts by severity, category</li> <li>Send critical alerts via email to admin</li> <li>Monitor login anomalies across all apps</li> <li>Schedule daily integrity scans (AIDE + Wazuh)</li> </ul>"},{"location":"14_deployment_guide/07_logging_monitoring/#secure-the-monitoring-plane","title":"\ud83d\udd12 Secure the Monitoring Plane","text":"<ul> <li>Use TLS between agents and server</li> <li>Lock access to Wazuh dashboards via Keycloak SSO</li> <li>Store logs long-term in immutable backup or cold storage</li> </ul>"},{"location":"14_deployment_guide/07_logging_monitoring/#output-of-this-phase","title":"\u2705 Output of This Phase","text":"<ul> <li>Full observability over system activity</li> <li>Live dashboards and audit trails for incident response</li> <li>Real-time alerting based on policy or behavioral anomalies</li> </ul> <p>\u2192 Proceed to Phase 7: Validation and Reporting</p>"},{"location":"14_deployment_guide/08_validation_reporting/","title":"Phase 7: Validation and Reporting","text":"<p>This final phase focuses on verifying the operational security of the deployed stack and generating the documentation, artifacts, and audit trails necessary to support a CMMC Level 2 readiness posture.</p>"},{"location":"14_deployment_guide/08_validation_reporting/#phase-7-validation-and-reporting_1","title":"\ud83d\udccb Phase 7 \u2013 Validation and Reporting","text":""},{"location":"14_deployment_guide/08_validation_reporting/#what-to-validate","title":"\u2705 What to Validate","text":"Area What to Check Tools Used Authentication MFA enforced, no password-only access Keycloak logs Certificate Issuance User/device certs issued and valid Step-CA logs, openssl Network Controls Tailscale overlay ACLs applied Tailscale Admin Panel Email Security S/MIME signed + DKIM/SPF passed Mailcow, external tools File Integrity AIDE/Wazuh scans show no tampering Wazuh Dashboard System Logging All services forward logs Wazuh, auditd Firewall Rules Ingress/egress locked appropriately UFW, Podman ports"},{"location":"14_deployment_guide/08_validation_reporting/#collectable-evidence","title":"\ud83d\udcc2 Collectable Evidence","text":"<p>You\u2019ll want to store and organize:</p> <ul> <li>Terraform state files (<code>terraform.tfstate</code>)</li> <li>Ansible logs or version-controlled playbooks</li> <li>Screenshots of admin panels showing:</li> <li>MFA</li> <li>Certs</li> <li>ACLs</li> <li>Sample audit log exports (Keycloak, Mailcow, Wazuh)</li> <li>Evidence of patching (apt history, unattended-upgrades)</li> <li>Step-CA issuance records and cert chains</li> </ul>"},{"location":"14_deployment_guide/08_validation_reporting/#ssp-traceability","title":"\ud83e\uddea SSP Traceability","text":"<p>Update your System Security Plan (SSP) with:</p> Section Source Artifacts System Description Terraform plan, network diagram Access Controls Keycloak config, user group mappings Identification &amp; Authn Step-CA cert configs, login policies System Integrity AIDE config, Wazuh scans Media Protection Nextcloud policy + file share setup Configuration Mgmt Ansible repo Audit &amp; Accountability Wazuh reports, auditd logs"},{"location":"14_deployment_guide/08_validation_reporting/#optional-reporting-deliverables","title":"\ud83d\udce4 Optional Reporting Deliverables","text":"<ul> <li>Daily/weekly PDF audit reports (via Wazuh)</li> <li>Manual control assessment checklist (110 controls)</li> <li>Executive summary for non-technical stakeholders</li> </ul>"},{"location":"14_deployment_guide/08_validation_reporting/#final-checklist","title":"\ud83e\uddfe Final Checklist","text":"<ul> <li>[x] System deployed using Terraform/Ansible/Podman</li> <li>[x] All users access services via MFA/SSO</li> <li>[x] Logs monitored and reviewed in Wazuh</li> <li>[x] Certs issued from internal CA for users and devices</li> <li>[x] Client access from Windows/macOS/Linux/iOS/Android verified</li> <li>[x] SSP updated with deployed configuration</li> </ul>"},{"location":"14_deployment_guide/08_validation_reporting/#congratulations","title":"\ud83c\udf89 Congratulations","text":"<p>You now have a fully operational, CMMC-aligned FOSS infrastructure stack suitable for small to medium DoD contractors. This system emphasizes Zero Trust, certificate-based identity, and full observability across all endpoints and services.</p>"},{"location":"14_deployment_guide/phase04-files/","title":"Phase 3A: File Collaboration Services \u2013 Nextcloud AIO Deployment","text":"<p>In this phase, we deploy Nextcloud All-in-One (AIO) to enable secure file sharing, document collaboration, calendar access, and group-based data controls.</p> <p>Nextcloud AIO consolidates all supporting services (PostgreSQL, Redis, ClamAV, OnlyOffice, Talk) into a single hardened container, reducing complexity and improving security posture.</p>"},{"location":"14_deployment_guide/phase04-files/#aio-deployment-overview","title":"\ud83d\udce6 AIO Deployment Overview","text":"<p>Nextcloud AIO is deployed via Docker and should only be accessible behind a secure reverse proxy like NGINX Proxy Manager or Traefik.</p>"},{"location":"14_deployment_guide/phase04-files/#key-features-included","title":"\u2705 Key Features Included:","text":"<ul> <li>Full-text search and OnlyOffice document editing</li> <li>File-level audit logging</li> <li>SAML SSO integration via Keycloak</li> <li>Team Folder access control</li> <li>Built-in virus scanning with ClamAV</li> <li>Scheduled backup tools</li> <li>Status endpoint for uptime monitoring</li> </ul>"},{"location":"14_deployment_guide/phase04-files/#prerequisites","title":"\ud83d\udee0 Prerequisites","text":"<ul> <li>Reverse proxy is operational (NGINX Proxy Manager recommended)</li> <li>External domain with SSL termination set up</li> <li>Docker is installed on the host</li> <li>Backup volume storage mounted at <code>/mnt/ncdata</code></li> </ul>"},{"location":"14_deployment_guide/phase04-files/#deployment-steps","title":"\ud83e\uddf1 Deployment Steps","text":"<ol> <li>Create Docker volumes (if not using named mounts):</li> </ol> <pre><code>docker volume create nextcloud_aio_mastercontainer\ndocker volume create ncdata\n</code></pre> <ol> <li>Launch the AIO master container:</li> </ol> <pre><code>docker run -d \\\n  --name nextcloud-aio-mastercontainer \\\n  --restart always \\\n  -p 8080:8080 \\\n  -v nextcloud_aio_mastercontainer:/mnt/docker-aio-config \\\n  -e NEXTCLOUD_DATADIR=\"/mnt/ncdata\" \\\n  nextcloud/all-in-one:latest\n</code></pre> <ol> <li> <p>Access the admin portal at: <code>http://yourhost:8080</code> and follow the web-based installer</p> </li> <li> <p>Configure NGINX Proxy Manager:</p> </li> <li>Forward <code>nextcloud.yourdomain.com</code> \u2192 <code>localhost:8080</code></li> <li>Enable HTTPS with Let's Encrypt</li> <li>Enforce HTTP/2, HSTS, and force SSL</li> </ol>"},{"location":"14_deployment_guide/phase04-files/#keycloak-saml-integration","title":"\ud83d\udd10 Keycloak SAML Integration","text":"<p>Once AIO is running:</p> <ol> <li>Enable SSO &amp; SAML authentication app in Nextcloud</li> <li>Configure:</li> <li>UID mapping: <code>user.userprincipalname</code></li> <li>Display name: <code>user.displayname</code></li> <li>Email: <code>user.mail</code></li> <li>Groups: <code>groups</code></li> <li>In Keycloak:</li> <li>Register a SAML client with metadata from:      <code>https://nextcloud.yourdomain.com/apps/user_saml/saml/metadata</code></li> <li>Map required attributes</li> </ol> <p>This setup ensures login is identity-bound and supports group-based file access.</p>"},{"location":"14_deployment_guide/phase04-files/#team-folder-setup-for-cuifci","title":"\ud83d\udd12 Team Folder Setup for CUI/FCI","text":"<ol> <li>In Nextcloud Admin Panel:</li> <li>Enable Team folders (formerly Group folders)</li> <li>Create folders:</li> <li><code>/Access_CUI</code></li> <li><code>/Access_FCI</code></li> <li><code>/Access_Proprietary</code></li> <li>Assign groups from SAML mapping (e.g., Keycloak groups)</li> </ol> <p>You can enforce restrictions via the File Access Control app.</p>"},{"location":"14_deployment_guide/phase04-files/#health-monitoring","title":"\ud83d\udd01 Health Monitoring","text":"<p>Expose a status endpoint for Uptime Kuma or Prometheus-style checks:</p> <ul> <li>URL: <code>https://nextcloud.yourdomain.com/status.php</code></li> <li>Expected result: HTTP 200</li> </ul> <p>Configure alerting if the instance is unreachable for &gt;5 minutes.</p>"},{"location":"14_deployment_guide/phase04-files/#backup-recommendations","title":"\ud83d\udd10 Backup Recommendations","text":"<p>Recommended: <code>restic</code>, <code>borgbackup</code>, or built-in Nextcloud backup app.</p> <p>Backup: - <code>/mnt/ncdata</code> - <code>nextcloud_aio_mastercontainer</code> config volume</p> <p>Store offsite or on offline media. Validate monthly.</p>"},{"location":"14_deployment_guide/phase04-files/#output-of-this-phase","title":"\u2705 Output of This Phase","text":"<ul> <li>Fully operational Nextcloud AIO instance</li> <li>TLS-secured access with SAML authentication</li> <li>Logical group-based access to sensitive data</li> <li>ClamAV, audit logging, and backup services integrated</li> </ul> <p>\u2192 Proceed to Phase 4: Identity &amp; Certificate Management</p>"},{"location":"15_secops_sops/","title":"\ud83d\udee1\ufe0f Section 15: Security Operations Procedures (SecOps SOPs)","text":""},{"location":"15_secops_sops/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section defines the routine security tasks required to maintain, monitor, and verify the operational security of the OpenCMMC Stack. These procedures support ongoing compliance with System and Information Integrity (SI), Configuration Management (CM), Access Control (AC), and Audit and Accountability (AU) domains in CMMC Level 2.</p>"},{"location":"15_secops_sops/#daily-operations-checklist","title":"\ud83d\udcc6 Daily Operations Checklist","text":"Task Responsible Role Tools Evidence Review Wazuh dashboard alerts Security Officer Wazuh Web UI Screenshot or exported alert logs Check Podman service health System Admin <code>podman ps</code>, <code>systemctl status</code> CLI output Verify overnight backup success System Admin <code>journalctl -u restic-backup.timer</code> Timer log Tailscale device review Network Admin Tailscale Admin Panel Screenshot or audit log"},{"location":"15_secops_sops/#weekly-operations-checklist","title":"\ud83d\udcc5 Weekly Operations Checklist","text":"Task Responsible Role Tools Evidence Apply pending OS updates (non-emergency) System Admin <code>apt</code>, <code>ansible-pull</code> Ansible log or <code>apt list --upgradable</code> Review Keycloak login history and MFA failures Security Officer Keycloak Admin Console Audit log export Rotate logs to archive System Admin <code>logrotate</code>, <code>tar</code> Archived <code>.gz</code> file list Compare current container image versions DevSecOps <code>podman image ls</code>, <code>skopeo inspect</code> Version report or SBOM diff"},{"location":"15_secops_sops/#monthly-operations-checklist","title":"\ud83d\uddd3\ufe0f Monthly Operations Checklist","text":"Task Responsible Role Tools Evidence Run backup restore test Security Officer <code>restic</code>, <code>diff</code> Screenshot or diff report Review all Wazuh rule overrides Security Officer Wazuh Rules Config Rule diff or exported rules Conduct user access review HR + IT Keycloak Groups Access report Test disaster recovery procedure System Admin Runbook or manual Checklist completion or script output"},{"location":"15_secops_sops/#tools-and-scripts-used","title":"\ud83d\udee0\ufe0f Tools and Scripts Used","text":"<ul> <li><code>restic-backup.sh</code> \u2014 backup and retention</li> <li><code>podman</code> \u2014 container monitoring and updates</li> <li><code>ansible</code> \u2014 patch automation, drift detection</li> <li><code>journalctl</code> \u2014 log source for backup and security events</li> <li><code>Wazuh</code> \u2014 security alerts and compliance reporting</li> <li><code>Keycloak</code> \u2014 access logging and user behavior</li> </ul>"},{"location":"15_secops_sops/#audit-artifacts-to-maintain","title":"\ud83d\uddc2\ufe0f Audit Artifacts to Maintain","text":"Artifact Source Frequency Wazuh alerts (critical/high) Wazuh dashboard Daily Backup logs systemd journal Daily Restore test success/fail log CLI/Restic output Monthly Patch application log Ansible/Apt Weekly Keycloak login audit Exported .csv Weekly"},{"location":"15_secops_sops/#cmmc-practices-addressed","title":"\ud83d\udccc CMMC Practices Addressed","text":"Practice Description SI.2.216 Monitor system security alerts and logs SI.1.210 Identify unauthorized use or modification CM.2.067 Monitor system configuration AC.1.001 Maintain access restrictions"},{"location":"15_secops_sops/#next-step","title":"\u2705 Next Step","text":"<p>In the next section, you\u2019ll document how new users and devices are securely provisioned and scoped using identity-based Zero Trust policies.</p>"},{"location":"16_user_device_onboarding/","title":"\ud83d\udc64 Section 16: Initial User &amp; Device Onboarding","text":""},{"location":"16_user_device_onboarding/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section defines the secure provisioning process for new users and their devices into the OpenCMMC Stack environment. It ensures each identity and device is verified, minimally privileged, and monitored in accordance with Zero Trust Architecture (ZTA) principles and CMMC Level 2 requirements across Access Control (AC) and Identification and Authentication (IA) domains.</p>"},{"location":"16_user_device_onboarding/#user-identity-onboarding","title":"\ud83e\uddcd User Identity Onboarding","text":""},{"location":"16_user_device_onboarding/#1-identity-creation-keycloak","title":"1. Identity Creation (Keycloak)","text":"Step Description 1.1 Admin creates user in Keycloak with email, display name, and default group 1.2 MFA is enforced during initial login using TOTP or YubiKey 1.3 Assign user to appropriate roles: <code>Access_CUI</code>, <code>Access_Admin</code>, etc. 1.4 Email welcome message with usage policies and login instructions"},{"location":"16_user_device_onboarding/#2-role-mapping","title":"2. Role Mapping","text":"Role CUI Access Admin Rights <code>Access_CUI</code> \u2705 \u274c <code>Access_Admin</code> \u2705 \u2705 <code>Access_Viewer</code> \u274c \u274c"},{"location":"16_user_device_onboarding/#device-registration-workflow","title":"\ud83d\udcbb Device Registration Workflow","text":""},{"location":"16_user_device_onboarding/#supported-platforms","title":"Supported Platforms","text":"<ul> <li>\u2705 Windows 10/11</li> <li>\u2705 macOS 12+</li> <li>\u2705 Ubuntu 22.04+</li> <li>\u2705 Android (Tailscale, WebDAV, Secure Mail)</li> <li>\u2705 iOS (Tailscale, WebDAV, Secure Mail)</li> </ul>"},{"location":"16_user_device_onboarding/#1-network-registration-via-tailscale","title":"1. Network Registration via Tailscale","text":"Step Description 1.1 Device joins Tailnet using SSO-verified user identity 1.2 Admin approves the device in Tailscale dashboard 1.3 Device label is updated with hostname and user ID 1.4 Key rotation is scheduled every 30 days (or MDM policy)"},{"location":"16_user_device_onboarding/#2-device-hardening-expectations","title":"2. Device Hardening Expectations","text":"<ul> <li>Encrypted disk (BitLocker/FileVault/LUKS)</li> <li>Enabled firewall</li> <li>Automatic updates enabled</li> <li>Anti-malware (Defender, ClamAV, etc.)</li> <li>Audit logging forwarded to Wazuh (where possible)</li> </ul>"},{"location":"16_user_device_onboarding/#sso-configuration-for-new-devices","title":"\ud83d\udd10 SSO Configuration for New Devices","text":"<p>Each supported platform should use the Keycloak SSO endpoint (OIDC or SAML) for:</p> <ul> <li>Nextcloud access (WebDAV and GUI)</li> <li>Mailcow webmail and IMAP clients</li> <li>Admin tools (Keycloak, Wazuh Web UI)</li> <li>Entra ID bridging or FreeIPA federation if applicable</li> </ul>"},{"location":"16_user_device_onboarding/#validation-checklist","title":"\ud83e\uddea Validation Checklist","text":"Check How to Verify Evidence MFA enabled Keycloak user settings Screenshot Device appears in Tailnet Tailscale Admin Panel Audit log Keycloak login succeeds Browser test or CLI tool Screenshot Backup groups assigned Keycloak group list Group dump System meets baseline config MDM/Ansible facts Output capture"},{"location":"16_user_device_onboarding/#cmmc-practices-addressed","title":"\ud83d\udcdc CMMC Practices Addressed","text":"Practice Description AC.1.001 Limit access to authorized users AC.2.007 Employ least privilege IA.2.078 Enforce MFA SC.1.175 Protect CUI in transit CM.2.067 Monitor device configuration"},{"location":"16_user_device_onboarding/#next-step","title":"\u2705 Next Step","text":"<p>Once users and devices are securely onboarded, Section 17 outlines patching, vulnerability, and configuration management procedures.</p>"},{"location":"17_patch_vuln_management/","title":"\ud83d\udee0\ufe0f Section 17: Patch &amp; Vulnerability Management","text":""},{"location":"17_patch_vuln_management/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section outlines the procedures, tooling, and schedules for maintaining patched and secure software, container images, and infrastructure configurations in the OpenCMMC Stack. It supports compliance with CMMC Level 2 practices in the System &amp; Information Integrity (SI), Configuration Management (CM), and Risk Assessment (RA) domains.</p>"},{"location":"17_patch_vuln_management/#continuous-patching-strategy","title":"\ud83d\udd04 Continuous Patching Strategy","text":""},{"location":"17_patch_vuln_management/#1-host-level-patching","title":"1. Host-Level Patching","text":"Component Method Schedule Ubuntu OS <code>apt update &amp;&amp; apt upgrade</code> via Ansible Weekly (auto), Monthly (manual) Kernel/critical CVEs <code>unattended-upgrades</code> + CVE tracking Daily System hardening validation Ansible diff or compliance check Monthly"},{"location":"17_patch_vuln_management/#2-container-image-refresh","title":"2. Container Image Refresh","text":"Component Source Validation Podman images <code>podman pull &lt;image&gt;</code> Digest verification Image integrity <code>skopeo inspect</code> + SBOM check <code>grype</code>, <code>trivy</code> Drift detection <code>ansible-playbook</code> dry-run Weekly"},{"location":"17_patch_vuln_management/#vulnerability-scanning-tools","title":"\ud83d\udd0d Vulnerability Scanning Tools","text":"Tool Target Purpose <code>grype</code> Local containers, images SBOM and CVE scans <code>trivy</code> Container registry, file systems Vulnerability + secret scan <code>clamav</code> File uploads in Nextcloud Malware detection <code>ansible-lint</code> IaC playbook scan Misconfig checks"},{"location":"17_patch_vuln_management/#patch-lifecycle-automation-ansible","title":"\ud83d\udd04 Patch Lifecycle Automation (Ansible)","text":"<ul> <li>Role: <code>roles/patching</code></li> <li>Features:</li> <li>OS package updates</li> <li>Container image digests refresh</li> <li>Service restarts for updated dependencies</li> <li>Backup validation prior to changes</li> <li>Summary report email</li> </ul>"},{"location":"17_patch_vuln_management/#verification-checklist","title":"\ud83e\uddea Verification Checklist","text":"Check Method Evidence CVE reports resolved <code>grype</code>, <code>trivy</code> JSON scan reports Kernel patches current <code>uname -r</code>, <code>apt</code> CLI output Image digests match SBOM <code>skopeo inspect</code> Diff report No critical unpatched packages <code>apt list --upgradable</code> CLI export Patch playbook log exists <code>ansible-playbook</code> log Log file"},{"location":"17_patch_vuln_management/#recommended-patch-schedule","title":"\ud83d\udcc5 Recommended Patch Schedule","text":"Frequency Tasks Daily Security CVE polling, unattended upgrades Weekly OS &amp; container image patch via Ansible Monthly Restore test, SBOM scan, role diff Quarterly Full stack rebuild in staging"},{"location":"17_patch_vuln_management/#cmmc-practices-addressed","title":"\ud83d\udcdc CMMC Practices Addressed","text":"Practice Description SI.1.210 Identify and manage system flaws SI.2.214 Update and patch system vulnerabilities CM.2.067 Monitor system configuration for change RA.2.144 Scan for vulnerabilities"},{"location":"17_patch_vuln_management/#next-step","title":"\u2705 Next Step","text":"<p>In Section 18, we\u2019ll define the incident response and forensics capabilities to prepare for breach scenarios and ensure auditability.</p>"},{"location":"18_incident_response/","title":"\ud83d\udea8 Section 18: Incident Response &amp; Forensics Toolkit","text":""},{"location":"18_incident_response/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section documents the basic incident response (IR) and digital forensics capabilities built into the OpenCMMC Stack. These procedures ensure organizations can detect, respond to, and investigate security incidents while maintaining CMMC Level 2 compliance across the Incident Response (IR), System Integrity (SI), and Audit (AU) domains.</p>"},{"location":"18_incident_response/#incident-response-workflow","title":"\ud83e\udded Incident Response Workflow","text":"Phase Activity Responsible Party Identification Wazuh alert, log review, anomaly detection Security Officer Containment Revoke access, disable device, isolate container IT Administrator Eradication Patch, clean malware, reset credentials IT Administrator Recovery Restore from backup, validate system System Owner Lessons Learned Document event, root cause analysis IR Team / Owner"},{"location":"18_incident_response/#built-in-ir-toolkit","title":"\ud83d\udee0\ufe0f Built-In IR Toolkit","text":"Tool Use Case Wazuh SIEM alerting, agent logs, rootkit detection Tailscale ACL Instantly revoke device access Ansible Re-image, rotate credentials, config diff Restic Backup restoration and snapshot rollback Auditd Local command history and access tracking"},{"location":"18_incident_response/#ir-playbooks","title":"\ud83e\uddea IR Playbooks","text":"Scenario Playbook Path Outcome Ransomware Detected <code>playbooks/ir/ransomware.yml</code> Isolate, backup, restore clean Unauthorized Login <code>playbooks/ir/access_violation.yml</code> Rotate creds, notify user, log File Integrity Alert <code>playbooks/ir/filesystem_anomaly.yml</code> Snapshot, analyze, alert <p>Each playbook can be invoked via <code>ansible-playbook</code> or executed in staging mode for tabletop exercises.</p>"},{"location":"18_incident_response/#forensic-data-collection","title":"\ud83d\udd75\ufe0f Forensic Data Collection","text":"Source Method Retention Audit logs <code>journalctl</code>, <code>auditctl</code>, <code>Wazuh</code> 90 days Container state <code>podman diff</code>, <code>podman inspect</code> Snapshot file Network activity Tailscale admin logs 30 days File changes AIDE database Rotated weekly User activity Keycloak login records 60 days"},{"location":"18_incident_response/#cmmc-practices-addressed","title":"\ud83d\udcdc CMMC Practices Addressed","text":"Practice Description IR.2.093 Detect and report events IR.2.094 Analyze and triage incidents IR.2.095 Contain, eradicate, and recover IR.2.096 Track and document response AU.2.042 Maintain audit records SI.1.210 Identify unauthorized activity"},{"location":"18_incident_response/#next-step","title":"\u2705 Next Step","text":"<p>Now that incident response is defined, the next section (19) will define how CUI and FCI flow through the environment and how boundaries are enforced.</p>"},{"location":"19_data_flow_mapping/","title":"\ud83e\udded Section 19: CUI/FCI Data Flow &amp; Trust Boundary Mapping","text":""},{"location":"19_data_flow_mapping/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section defines how Controlled Unclassified Information (CUI) and Federal Contract Information (FCI) traverse the OpenCMMC Stack, and how trust boundaries are enforced to protect sensitive data in transit, at rest, and in use. This supports scoping and documentation for CMMC Level 2 assessment readiness.</p>"},{"location":"19_data_flow_mapping/#trust-zones-overview","title":"\ud83e\uddca Trust Zones Overview","text":"Zone Description Examples Trusted User Devices Authenticated devices with endpoint controls Company laptops, mobile devices Trusted Infrastructure Hardened, monitored servers with audit and backup Ubuntu LTS, Podman-hosted services DMZ/Public Access Services exposed via reverse proxy with access control NGINX Proxy Manager Identity &amp; Access Control SSO, MFA, and user provisioning services Keycloak, Tailscale Monitoring &amp; Forensics Central log and response tools Wazuh, Auditd, Restic"},{"location":"19_data_flow_mapping/#data-flow-examples","title":"\ud83d\udd01 Data Flow Examples","text":""},{"location":"19_data_flow_mapping/#cui-file-upload-via-nextcloud","title":"CUI File Upload via Nextcloud","text":"<ol> <li>Authenticated user connects via Tailscale</li> <li>Keycloak enforces MFA and SAML SSO</li> <li>User uploads CUI file into Nextcloud AIO</li> <li>File is stored encrypted-at-rest on host volume</li> <li>Access is controlled via group-based permissions</li> <li>Audit events logged to Wazuh</li> </ol>"},{"location":"19_data_flow_mapping/#secure-email-transmission-mailcow","title":"Secure Email Transmission (Mailcow)","text":"<ol> <li>Authenticated user logs into Mailcow webmail or IMAP</li> <li>Outbound message is TLS-encrypted and DKIM-signed</li> <li>Headers identify sender, recipient, and sensitivity</li> <li>Delivery logs and access logs stored centrally</li> </ol>"},{"location":"19_data_flow_mapping/#boundary-controls","title":"\ud83e\uddf1 Boundary Controls","text":"Control Type Enforcement Mechanism Network Trust Tailscale identity-based tunnels Identity Assurance Keycloak + MFA Access Policy RBAC via Keycloak + App config Audit Logging Auditd, Wazuh, Journalctl Configuration Drift Ansible enforcement and scans"},{"location":"19_data_flow_mapping/#architecture-diagram","title":"\ud83d\uddbc\ufe0f Architecture Diagram","text":"<p>This diagram visualizes how Controlled Unclassified Information (CUI) and Federal Contract Information (FCI) flow securely through trust zones in the OpenCMMC Stack. Each containerized service is scoped, monitored, and hardened to enforce CMMC Level 2 compliance.</p>"},{"location":"19_data_flow_mapping/#cmmc-practices-addressed","title":"\ud83d\udcdc CMMC Practices Addressed","text":"Practice Description CA.2.157 Define and enforce system boundaries SC.1.175 Protect CUI in transit SC.2.178 Limit information flow AC.2.006 Control system access to CUI AU.2.042 Record and review user actions"},{"location":"19_data_flow_mapping/#next-step","title":"\u2705 Next Step","text":"<p>With trust boundaries defined, Section 20 will summarize performance, scaling, and cost estimation for different org sizes.</p>"},{"location":"20_scaling_cost/","title":"\ud83d\udcca Section 20: Performance, Scaling &amp; Cost Estimation","text":""},{"location":"20_scaling_cost/#objective","title":"\ud83c\udfaf Objective","text":"<p>This section provides guidance for adapting the OpenCMMC Stack to support various organizational sizes \u2014 from 1-person SBIR teams to 50-person prime contractors. It includes performance tuning tips, scaling recommendations, and rough monthly cost estimates for DigitalOcean, AWS, or on-prem deployments.</p>"},{"location":"20_scaling_cost/#baseline-configuration-15-users","title":"\ud83e\uddf1 Baseline Configuration (1\u20135 Users)","text":"Component Count Notes VM Instances 1 4 vCPU / 8GB RAM minimum Storage Volumes 2 App volume + Backup volume Tailscale Devices 5 Laptops, phones, tablets Services All Same as production stack <p>Monthly Estimate (DigitalOcean): $35\u201355 - $24 droplet + $10 volume + $5 bandwidth</p>"},{"location":"20_scaling_cost/#mid-tier-scaling-525-users","title":"\ud83d\udcc8 Mid-Tier Scaling (5\u201325 Users)","text":"Component Scaling Tips Separate DB Host Move PostgreSQL to a second droplet External S3 Store backups in Wasabi or Backblaze HA Reverse Proxy Consider HAProxy or secondary NGINX Logging Volume Increase Wazuh retention window to 90d Backup Jobs Offload to secondary host or cronbox <p>Monthly Estimate (DO or AWS): $75\u2013125 - 2 droplets + Object storage + Backup egress</p>"},{"location":"20_scaling_cost/#large-deployment-2550-users","title":"\ud83c\udfe2 Large Deployment (25\u201350+ Users)","text":"Component Recommendation Podman Networking Use MACVLAN or custom bridges External Monitoring Forward Wazuh to SIEM (Elastic/Splunk) Container Registry Self-host Harbor or use GHCR Storage Redundancy RAID 1 + offsite Restic MDM Integration Link with Intune, Jamf, or FleetDM Email Scaling Consider external SMTP relay or Postfix queue tuning <p>Monthly Estimate (Hybrid/on-prem): $200\u2013350 - VM cluster or VPS spread, higher backup costs</p>"},{"location":"20_scaling_cost/#performance-tuning","title":"\u2699\ufe0f Performance Tuning","text":"<ul> <li>Enable Podman healthchecks and log rotation</li> <li>Use Redis caching (for Nextcloud + Keycloak)</li> <li>Prune stale containers and old volumes weekly</li> <li>Schedule Ansible audits every 7 days</li> <li>Keep kernel and container images lean</li> </ul>"},{"location":"20_scaling_cost/#cost-optimization-tips","title":"\ud83d\udcc9 Cost Optimization Tips","text":"Technique Benefit Use ARM-based VMs Lower cloud cost (e.g., C6g, Ampere) Use Tailscale exit nodes Avoid paid VPN/GW services Host Wazuh UI locally Skip cloud SIEM tiers Use BorgBackup + rclone Avoid egress-heavy snapshots"},{"location":"20_scaling_cost/#cmmc-practices-supported","title":"\ud83d\udcdc CMMC Practices Supported","text":"Practice Description CP.2.120 Establish and maintain backups MA.2.111 Schedule maintenance CM.2.066 System configuration monitoring AU.2.043 Capacity planning based on logs RA.2.143 Identify and manage risks"},{"location":"20_scaling_cost/#next-step","title":"\u2705 Next Step","text":"<p>With performance and cost scoped, use Appendix A and B for acronyms and additional resources.</p>"}]}